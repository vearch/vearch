// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_grpc.proto

#include "router_grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vearchpb {
PROTOBUF_CONSTEXPR RequestHead_ParamsEntry_DoNotUse::RequestHead_ParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RequestHead_ParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHead_ParamsEntry_DoNotUseDefaultTypeInternal _RequestHead_ParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RequestHead::RequestHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.db_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.space_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_out_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHeadDefaultTypeInternal() {}
  union {
    RequestHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHeadDefaultTypeInternal _RequestHead_default_instance_;
PROTOBUF_CONSTEXPR ResponseHead_ParamsEntry_DoNotUse::ResponseHead_ParamsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ResponseHead_ParamsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseHead_ParamsEntry_DoNotUseDefaultTypeInternal _ResponseHead_ParamsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ResponseHead::ResponseHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseHeadDefaultTypeInternal() {}
  union {
    ResponseHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseHeadDefaultTypeInternal _ResponseHead_default_instance_;
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primary_keys_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.primary_keys_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR BulkRequest::BulkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.docs_)*/{}
  , /*decltype(_impl_.partitions_)*/{}
  , /*decltype(_impl_._partitions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkRequestDefaultTypeInternal() {}
  union {
    BulkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkRequestDefaultTypeInternal _BulkRequest_default_instance_;
PROTOBUF_CONSTEXPR ForceMergeRequest::ForceMergeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForceMergeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForceMergeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForceMergeRequestDefaultTypeInternal() {}
  union {
    ForceMergeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForceMergeRequestDefaultTypeInternal _ForceMergeRequest_default_instance_;
PROTOBUF_CONSTEXPR FlushRequest::FlushRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushRequestDefaultTypeInternal() {}
  union {
    FlushRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushRequestDefaultTypeInternal _FlushRequest_default_instance_;
PROTOBUF_CONSTEXPR IndexRequest::IndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.drop_before_rebuild_)*/int64_t{0}
  , /*decltype(_impl_.limit_cpu_)*/int64_t{0}
  , /*decltype(_impl_.describe_)*/int64_t{0}
  , /*decltype(_impl_.partition_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRequestDefaultTypeInternal() {}
  union {
    IndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
PROTOBUF_CONSTEXPR GetResponse::GetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteResponse::DeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR BulkResponse::BulkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkResponseDefaultTypeInternal() {}
  union {
    BulkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkResponseDefaultTypeInternal _BulkResponse_default_instance_;
PROTOBUF_CONSTEXPR ForceMergeResponse::ForceMergeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.shards_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForceMergeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForceMergeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForceMergeResponseDefaultTypeInternal() {}
  union {
    ForceMergeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForceMergeResponseDefaultTypeInternal _ForceMergeResponse_default_instance_;
PROTOBUF_CONSTEXPR DelByQueryeResponse::DelByQueryeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_str_)*/{}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.delnum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelByQueryeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelByQueryeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelByQueryeResponseDefaultTypeInternal() {}
  union {
    DelByQueryeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelByQueryeResponseDefaultTypeInternal _DelByQueryeResponse_default_instance_;
PROTOBUF_CONSTEXPR FlushResponse::FlushResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.shards_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlushResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlushResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlushResponseDefaultTypeInternal() {}
  union {
    FlushResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlushResponseDefaultTypeInternal _FlushResponse_default_instance_;
PROTOBUF_CONSTEXPR IndexResponse::IndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.shards_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexResponseDefaultTypeInternal() {}
  union {
    IndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexResponseDefaultTypeInternal _IndexResponse_default_instance_;
PROTOBUF_CONSTEXPR TermFilter::TermFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_union_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TermFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TermFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TermFilterDefaultTypeInternal() {}
  union {
    TermFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TermFilterDefaultTypeInternal _TermFilter_default_instance_;
PROTOBUF_CONSTEXPR RangeFilter::RangeFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lower_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.upper_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.include_lower_)*/false
  , /*decltype(_impl_.include_upper_)*/false
  , /*decltype(_impl_.is_union_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeFilterDefaultTypeInternal() {}
  union {
    RangeFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeFilterDefaultTypeInternal _RangeFilter_default_instance_;
PROTOBUF_CONSTEXPR SortField::SortField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SortFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortFieldDefaultTypeInternal() {}
  union {
    SortField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortFieldDefaultTypeInternal _SortField_default_instance_;
PROTOBUF_CONSTEXPR VectorQuery::VectorQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_score_)*/0
  , /*decltype(_impl_.max_score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorQueryDefaultTypeInternal() {}
  union {
    VectorQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorQueryDefaultTypeInternal _VectorQuery_default_instance_;
PROTOBUF_CONSTEXPR IndexParameters::IndexParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metric_type_)*/0
  , /*decltype(_impl_.nprobe_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexParametersDefaultTypeInternal() {}
  union {
    IndexParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexParametersDefaultTypeInternal _IndexParameters_default_instance_;
PROTOBUF_CONSTEXPR QueryRequest_SortFieldMapEntry_DoNotUse::QueryRequest_SortFieldMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryRequest_SortFieldMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal _QueryRequest_SortFieldMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR QueryRequest::QueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.document_ids_)*/{}
  , /*decltype(_impl_.range_filters_)*/{}
  , /*decltype(_impl_.term_filters_)*/{}
  , /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.sort_field_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sort_fields_)*/{}
  , /*decltype(_impl_.load_balance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.partition_id_)*/0
  , /*decltype(_impl_.next_)*/false
  , /*decltype(_impl_.is_vector_value_)*/false
  , /*decltype(_impl_.trace_)*/false
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.page_size_)*/0
  , /*decltype(_impl_.operator__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest_SortFieldMapEntry_DoNotUse::SearchRequest_SortFieldMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SearchRequest_SortFieldMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequest_SortFieldMapEntry_DoNotUseDefaultTypeInternal _SearchRequest_SortFieldMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vec_fields_)*/{}
  , /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.range_filters_)*/{}
  , /*decltype(_impl_.term_filters_)*/{}
  , /*decltype(_impl_.sort_field_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sort_fields_)*/{}
  , /*decltype(_impl_.index_params_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ranker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.req_num_)*/0
  , /*decltype(_impl_.topn_)*/0
  , /*decltype(_impl_.is_brute_search_)*/0
  , /*decltype(_impl_.multi_vector_rank_)*/0
  , /*decltype(_impl_.l2_sqrt_)*/false
  , /*decltype(_impl_.is_vector_value_)*/false
  , /*decltype(_impl_.trace_)*/false
  , /*decltype(_impl_.operator__)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
PROTOBUF_CONSTEXPR ResultItem::ResultItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{}
  , /*decltype(_impl_.p_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultItemDefaultTypeInternal() {}
  union {
    ResultItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultItemDefaultTypeInternal _ResultItem_default_instance_;
PROTOBUF_CONSTEXPR SearchResult::SearchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_items_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.max_score_)*/0
  , /*decltype(_impl_.total_hits_)*/0
  , /*decltype(_impl_.max_took_id_)*/0u
  , /*decltype(_impl_.max_took_)*/int64_t{0}
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.timeout_)*/false
  , /*decltype(_impl_.topn_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResultDefaultTypeInternal() {}
  union {
    SearchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResultDefaultTypeInternal _SearchResult_default_instance_;
PROTOBUF_CONSTEXPR SearchResponse::SearchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.flatbytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_)*/nullptr
  , /*decltype(_impl_.timeout_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchResponseDefaultTypeInternal() {}
  union {
    SearchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchStatus::SearchStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_)*/0
  , /*decltype(_impl_.failed_)*/0
  , /*decltype(_impl_.successful_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchStatusDefaultTypeInternal() {}
  union {
    SearchStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchStatusDefaultTypeInternal _SearchStatus_default_instance_;
}  // namespace vearchpb
static ::_pb::Metadata file_level_metadata_router_5fgrpc_2eproto[30];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_router_5fgrpc_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_router_5fgrpc_2eproto = nullptr;

const uint32_t TableStruct_router_5fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.time_out_ms_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.user_name_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.db_name_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.space_name_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.client_type_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RequestHead, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead, _impl_.err_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResponseHead, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetRequest, _impl_.primary_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteRequest, _impl_.primary_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkRequest, _impl_.docs_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkRequest, _impl_.partitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ForceMergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ForceMergeRequest, _impl_.head_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::FlushRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::FlushRequest, _impl_.head_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _impl_.drop_before_rebuild_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _impl_.limit_cpu_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _impl_.describe_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexRequest, _impl_.partition_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::GetResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DeleteResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::BulkResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ForceMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ForceMergeResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ForceMergeResponse, _impl_.shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DelByQueryeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DelByQueryeResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DelByQueryeResponse, _impl_.delnum_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DelByQueryeResponse, _impl_.ids_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::FlushResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::FlushResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::FlushResponse, _impl_.shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexResponse, _impl_.shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::TermFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::TermFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::TermFilter, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::TermFilter, _impl_.is_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.lower_value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.upper_value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.include_lower_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.include_upper_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RangeFilter, _impl_.is_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SortField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SortField, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SortField, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.min_score_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.max_score_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::VectorQuery, _impl_.index_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexParameters, _impl_.metric_type_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::IndexParameters, _impl_.nprobe_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.document_ids_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.partition_id_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.next_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.range_filters_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.term_filters_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.is_vector_value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.load_balance_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.sort_field_map_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.sort_fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.trace_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::QueryRequest, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.req_num_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.topn_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.is_brute_search_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.vec_fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.range_filters_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.term_filters_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.index_params_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.multi_vector_rank_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.l2_sqrt_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.is_vector_value_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.sort_field_map_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.sort_fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.ranker_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.trace_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchRequest, _impl_.operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResultItem, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResultItem, _impl_.fields_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::ResultItem, _impl_.p_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.total_hits_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.max_score_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.max_took_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.max_took_id_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.result_items_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResult, _impl_.topn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResponse, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResponse, _impl_.timeout_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchResponse, _impl_.flatbytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchStatus, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchStatus, _impl_.failed_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchStatus, _impl_.successful_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SearchStatus, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::vearchpb::RequestHead_ParamsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::vearchpb::RequestHead)},
  { 23, 31, -1, sizeof(::vearchpb::ResponseHead_ParamsEntry_DoNotUse)},
  { 33, -1, -1, sizeof(::vearchpb::ResponseHead)},
  { 42, -1, -1, sizeof(::vearchpb::GetRequest)},
  { 50, -1, -1, sizeof(::vearchpb::DeleteRequest)},
  { 58, -1, -1, sizeof(::vearchpb::BulkRequest)},
  { 67, -1, -1, sizeof(::vearchpb::ForceMergeRequest)},
  { 74, -1, -1, sizeof(::vearchpb::FlushRequest)},
  { 81, -1, -1, sizeof(::vearchpb::IndexRequest)},
  { 92, -1, -1, sizeof(::vearchpb::GetResponse)},
  { 100, -1, -1, sizeof(::vearchpb::DeleteResponse)},
  { 108, -1, -1, sizeof(::vearchpb::BulkResponse)},
  { 116, -1, -1, sizeof(::vearchpb::ForceMergeResponse)},
  { 124, -1, -1, sizeof(::vearchpb::DelByQueryeResponse)},
  { 133, -1, -1, sizeof(::vearchpb::FlushResponse)},
  { 141, -1, -1, sizeof(::vearchpb::IndexResponse)},
  { 149, -1, -1, sizeof(::vearchpb::TermFilter)},
  { 158, -1, -1, sizeof(::vearchpb::RangeFilter)},
  { 170, -1, -1, sizeof(::vearchpb::SortField)},
  { 178, -1, -1, sizeof(::vearchpb::VectorQuery)},
  { 190, -1, -1, sizeof(::vearchpb::IndexParameters)},
  { 198, 206, -1, sizeof(::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse)},
  { 208, -1, -1, sizeof(::vearchpb::QueryRequest)},
  { 229, 237, -1, sizeof(::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse)},
  { 239, -1, -1, sizeof(::vearchpb::SearchRequest)},
  { 262, -1, -1, sizeof(::vearchpb::ResultItem)},
  { 271, -1, -1, sizeof(::vearchpb::SearchResult)},
  { 287, -1, -1, sizeof(::vearchpb::SearchResponse)},
  { 297, -1, -1, sizeof(::vearchpb::SearchStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vearchpb::_RequestHead_ParamsEntry_DoNotUse_default_instance_._instance,
  &::vearchpb::_RequestHead_default_instance_._instance,
  &::vearchpb::_ResponseHead_ParamsEntry_DoNotUse_default_instance_._instance,
  &::vearchpb::_ResponseHead_default_instance_._instance,
  &::vearchpb::_GetRequest_default_instance_._instance,
  &::vearchpb::_DeleteRequest_default_instance_._instance,
  &::vearchpb::_BulkRequest_default_instance_._instance,
  &::vearchpb::_ForceMergeRequest_default_instance_._instance,
  &::vearchpb::_FlushRequest_default_instance_._instance,
  &::vearchpb::_IndexRequest_default_instance_._instance,
  &::vearchpb::_GetResponse_default_instance_._instance,
  &::vearchpb::_DeleteResponse_default_instance_._instance,
  &::vearchpb::_BulkResponse_default_instance_._instance,
  &::vearchpb::_ForceMergeResponse_default_instance_._instance,
  &::vearchpb::_DelByQueryeResponse_default_instance_._instance,
  &::vearchpb::_FlushResponse_default_instance_._instance,
  &::vearchpb::_IndexResponse_default_instance_._instance,
  &::vearchpb::_TermFilter_default_instance_._instance,
  &::vearchpb::_RangeFilter_default_instance_._instance,
  &::vearchpb::_SortField_default_instance_._instance,
  &::vearchpb::_VectorQuery_default_instance_._instance,
  &::vearchpb::_IndexParameters_default_instance_._instance,
  &::vearchpb::_QueryRequest_SortFieldMapEntry_DoNotUse_default_instance_._instance,
  &::vearchpb::_QueryRequest_default_instance_._instance,
  &::vearchpb::_SearchRequest_SortFieldMapEntry_DoNotUse_default_instance_._instance,
  &::vearchpb::_SearchRequest_default_instance_._instance,
  &::vearchpb::_ResultItem_default_instance_._instance,
  &::vearchpb::_SearchResult_default_instance_._instance,
  &::vearchpb::_SearchResponse_default_instance_._instance,
  &::vearchpb::_SearchStatus_default_instance_._instance,
};

const char descriptor_table_protodef_router_5fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021router_grpc.proto\022\010vearchpb\032\020data_mode"
  "l.proto\032\014errors.proto\"\343\001\n\013RequestHead\022\023\n"
  "\013time_out_ms\030\001 \001(\003\022\021\n\tuser_name\030\002 \001(\t\022\020\n"
  "\010password\030\003 \001(\t\022\017\n\007db_name\030\004 \001(\t\022\022\n\nspac"
  "e_name\030\005 \001(\t\022\023\n\013client_type\030\006 \001(\t\0221\n\006par"
  "ams\030\007 \003(\0132!.vearchpb.RequestHead.ParamsE"
  "ntry\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\"\243\001\n\014ResponseHead\022\022\n\nrequest_"
  "id\030\001 \001(\t\022\034\n\003err\030\002 \001(\0132\017.vearchpb.Error\0222"
  "\n\006params\030\003 \003(\0132\".vearchpb.ResponseHead.P"
  "aramsEntry\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"G\n\nGetRequest\022#\n\004head\030"
  "\001 \001(\0132\025.vearchpb.RequestHead\022\024\n\014primary_"
  "keys\030\002 \003(\t\"J\n\rDeleteRequest\022#\n\004head\030\001 \001("
  "\0132\025.vearchpb.RequestHead\022\024\n\014primary_keys"
  "\030\002 \003(\t\"h\n\013BulkRequest\022#\n\004head\030\001 \001(\0132\025.ve"
  "archpb.RequestHead\022 \n\004docs\030\002 \003(\0132\022.vearc"
  "hpb.Document\022\022\n\npartitions\030\003 \003(\r\"8\n\021Forc"
  "eMergeRequest\022#\n\004head\030\001 \001(\0132\025.vearchpb.R"
  "equestHead\"3\n\014FlushRequest\022#\n\004head\030\001 \001(\013"
  "2\025.vearchpb.RequestHead\"\213\001\n\014IndexRequest"
  "\022#\n\004head\030\001 \001(\0132\025.vearchpb.RequestHead\022\033\n"
  "\023drop_before_rebuild\030\002 \001(\003\022\021\n\tlimit_cpu\030"
  "\003 \001(\003\022\020\n\010describe\030\004 \001(\003\022\024\n\014partition_id\030"
  "\005 \001(\r\"R\n\013GetResponse\022$\n\004head\030\001 \001(\0132\026.vea"
  "rchpb.ResponseHead\022\035\n\005items\030\002 \003(\0132\016.vear"
  "chpb.Item\"U\n\016DeleteResponse\022$\n\004head\030\001 \001("
  "\0132\026.vearchpb.ResponseHead\022\035\n\005items\030\002 \003(\013"
  "2\016.vearchpb.Item\"S\n\014BulkResponse\022$\n\004head"
  "\030\001 \001(\0132\026.vearchpb.ResponseHead\022\035\n\005items\030"
  "\002 \003(\0132\016.vearchpb.Item\"b\n\022ForceMergeRespo"
  "nse\022$\n\004head\030\001 \001(\0132\026.vearchpb.ResponseHea"
  "d\022&\n\006shards\030\002 \001(\0132\026.vearchpb.SearchStatu"
  "s\"\\\n\023DelByQueryeResponse\022$\n\004head\030\001 \001(\0132\026"
  ".vearchpb.ResponseHead\022\016\n\006DelNum\030\002 \001(\005\022\017"
  "\n\007ids_str\030\003 \003(\t\"]\n\rFlushResponse\022$\n\004head"
  "\030\001 \001(\0132\026.vearchpb.ResponseHead\022&\n\006shards"
  "\030\002 \001(\0132\026.vearchpb.SearchStatus\"]\n\rIndexR"
  "esponse\022$\n\004head\030\001 \001(\0132\026.vearchpb.Respons"
  "eHead\022&\n\006shards\030\002 \001(\0132\026.vearchpb.SearchS"
  "tatus\"<\n\nTermFilter\022\r\n\005field\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\014\022\020\n\010is_union\030\003 \001(\005\"\206\001\n\013RangeFil"
  "ter\022\r\n\005field\030\001 \001(\t\022\023\n\013lower_value\030\002 \001(\014\022"
  "\023\n\013upper_value\030\003 \001(\014\022\025\n\rinclude_lower\030\004 "
  "\001(\010\022\025\n\rinclude_upper\030\005 \001(\010\022\020\n\010is_union\030\006"
  " \001(\005\"(\n\tSortField\022\r\n\005field\030\001 \001(\t\022\014\n\004type"
  "\030\002 \001(\010\"t\n\013VectorQuery\022\014\n\004name\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\014\022\021\n\tmin_score\030\003 \001(\001\022\021\n\tmax_sco"
  "re\030\004 \001(\001\022\016\n\006format\030\005 \001(\t\022\022\n\nindex_type\030\006"
  " \001(\t\"\224\001\n\017IndexParameters\022A\n\013metric_type\030"
  "\001 \001(\0162,.vearchpb.IndexParameters.Distanc"
  "eMetricType\022\016\n\006nprobe\030\002 \001(\005\".\n\022DistanceM"
  "etricType\022\020\n\014InnerProduct\020\000\022\006\n\002L2\020\001\"\352\003\n\014"
  "QueryRequest\022#\n\004head\030\001 \001(\0132\025.vearchpb.Re"
  "questHead\022\024\n\014document_ids\030\002 \003(\t\022\024\n\014parti"
  "tion_id\030\003 \001(\005\022\014\n\004next\030\004 \001(\010\022,\n\rrange_fil"
  "ters\030\005 \003(\0132\025.vearchpb.RangeFilter\022*\n\014ter"
  "m_filters\030\006 \003(\0132\024.vearchpb.TermFilter\022\016\n"
  "\006fields\030\007 \003(\t\022\027\n\017is_vector_value\030\010 \001(\010\022\r"
  "\n\005limit\030\t \001(\005\022\021\n\tpage_size\030\n \001(\005\022\024\n\014load"
  "_balance\030\013 \001(\t\022@\n\016sort_field_map\030\014 \003(\0132("
  ".vearchpb.QueryRequest.SortFieldMapEntry"
  "\022(\n\013sort_fields\030\r \003(\0132\023.vearchpb.SortFie"
  "ld\022\r\n\005trace\030\016 \001(\010\022\020\n\010operator\030\017 \001(\005\0323\n\021S"
  "ortFieldMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"\257\004\n\rSearchRequest\022#\n\004head\030\001 \001(\013"
  "2\025.vearchpb.RequestHead\022\017\n\007req_num\030\002 \001(\005"
  "\022\014\n\004topN\030\003 \001(\005\022\027\n\017is_brute_search\030\004 \001(\005\022"
  ")\n\nvec_fields\030\005 \003(\0132\025.vearchpb.VectorQue"
  "ry\022\016\n\006fields\030\006 \003(\t\022,\n\rrange_filters\030\007 \003("
  "\0132\025.vearchpb.RangeFilter\022*\n\014term_filters"
  "\030\010 \003(\0132\024.vearchpb.TermFilter\022\024\n\014index_pa"
  "rams\030\t \001(\t\022\031\n\021multi_vector_rank\030\n \001(\005\022\017\n"
  "\007l2_sqrt\030\013 \001(\010\022\027\n\017is_vector_value\030\014 \001(\010\022"
  "A\n\016sort_field_map\030\r \003(\0132).vearchpb.Searc"
  "hRequest.SortFieldMapEntry\022(\n\013sort_field"
  "s\030\016 \003(\0132\023.vearchpb.SortField\022\016\n\006ranker\030\017"
  " \001(\t\022\r\n\005trace\030\020 \001(\010\022\020\n\010operator\030\021 \001(\005\0323\n"
  "\021SortFieldMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"K\n\nResultItem\022\r\n\005score\030\001 \001(\001\022"
  "\037\n\006fields\030\002 \003(\0132\017.vearchpb.Field\022\r\n\005p_ke"
  "y\030\003 \001(\t\"\351\001\n\014SearchResult\022\022\n\ntotal_hits\030\001"
  " \001(\005\022\021\n\tmax_score\030\002 \001(\001\022\020\n\010max_took\030\003 \001("
  "\003\022\023\n\013max_took_id\030\004 \001(\r\022&\n\006status\030\005 \001(\0132\026"
  ".vearchpb.SearchStatus\022\013\n\003msg\030\006 \001(\t\022*\n\014r"
  "esult_items\030\007 \003(\0132\024.vearchpb.ResultItem\022"
  "\013\n\003pID\030\010 \001(\r\022\017\n\007timeout\030\t \001(\010\022\014\n\004topN\030\n "
  "\001(\005\"\203\001\n\016SearchResponse\022$\n\004head\030\001 \001(\0132\026.v"
  "earchpb.ResponseHead\022\'\n\007results\030\002 \003(\0132\026."
  "vearchpb.SearchResult\022\017\n\007timeout\030\003 \001(\010\022\021"
  "\n\tFlatBytes\030\004 \001(\014\"N\n\014SearchStatus\022\r\n\005tot"
  "al\030\001 \001(\005\022\016\n\006failed\030\002 \001(\005\022\022\n\nsuccessful\030\003"
  " \001(\005\022\013\n\003msg\030\004 \001(\t2\366\002\n\021RouterGRPCService\022"
  "4\n\003Get\022\024.vearchpb.GetRequest\032\025.vearchpb."
  "GetResponse\"\000\022=\n\006Delete\022\027.vearchpb.Delet"
  "eRequest\032\030.vearchpb.DeleteResponse\"\000\022=\n\006"
  "Search\022\027.vearchpb.SearchRequest\032\030.vearch"
  "pb.SearchResponse\"\000\0227\n\004Bulk\022\025.vearchpb.B"
  "ulkRequest\032\026.vearchpb.BulkResponse\"\000\0221\n\005"
  "Space\022\025.vearchpb.RequestHead\032\017.vearchpb."
  "Table\"\000\022A\n\nSearchByID\022\027.vearchpb.SearchR"
  "equest\032\030.vearchpb.SearchResponse\"\000B\016H\001Z\n"
  "./vearchpbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_router_5fgrpc_2eproto_deps[2] = {
  &::descriptor_table_data_5fmodel_2eproto,
  &::descriptor_table_errors_2eproto,
};
static ::_pbi::once_flag descriptor_table_router_5fgrpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_router_5fgrpc_2eproto = {
    false, false, 4098, descriptor_table_protodef_router_5fgrpc_2eproto,
    "router_grpc.proto",
    &descriptor_table_router_5fgrpc_2eproto_once, descriptor_table_router_5fgrpc_2eproto_deps, 2, 30,
    schemas, file_default_instances, TableStruct_router_5fgrpc_2eproto::offsets,
    file_level_metadata_router_5fgrpc_2eproto, file_level_enum_descriptors_router_5fgrpc_2eproto,
    file_level_service_descriptors_router_5fgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_router_5fgrpc_2eproto_getter() {
  return &descriptor_table_router_5fgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_router_5fgrpc_2eproto(&descriptor_table_router_5fgrpc_2eproto);
namespace vearchpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexParameters_DistanceMetricType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_5fgrpc_2eproto);
  return file_level_enum_descriptors_router_5fgrpc_2eproto[0];
}
bool IndexParameters_DistanceMetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IndexParameters_DistanceMetricType IndexParameters::InnerProduct;
constexpr IndexParameters_DistanceMetricType IndexParameters::L2;
constexpr IndexParameters_DistanceMetricType IndexParameters::DistanceMetricType_MIN;
constexpr IndexParameters_DistanceMetricType IndexParameters::DistanceMetricType_MAX;
constexpr int IndexParameters::DistanceMetricType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

RequestHead_ParamsEntry_DoNotUse::RequestHead_ParamsEntry_DoNotUse() {}
RequestHead_ParamsEntry_DoNotUse::RequestHead_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RequestHead_ParamsEntry_DoNotUse::MergeFrom(const RequestHead_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RequestHead_ParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[0]);
}

// ===================================================================

class RequestHead::_Internal {
 public:
};

RequestHead::RequestHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RequestHead::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:vearchpb.RequestHead)
}
RequestHead::RequestHead(const RequestHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.params_)*/{}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.space_name_){}
    , decltype(_impl_.client_type_){}
    , decltype(_impl_.time_out_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_name().empty()) {
    _this->_impl_.db_name_.Set(from._internal_db_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.space_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_space_name().empty()) {
    _this->_impl_.space_name_.Set(from._internal_space_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_type().empty()) {
    _this->_impl_.client_type_.Set(from._internal_client_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.time_out_ms_ = from._impl_.time_out_ms_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.RequestHead)
}

inline void RequestHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.user_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.db_name_){}
    , decltype(_impl_.space_name_){}
    , decltype(_impl_.client_type_){}
    , decltype(_impl_.time_out_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.db_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.space_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestHead::~RequestHead() {
  // @@protoc_insertion_point(destructor:vearchpb.RequestHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RequestHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.Destruct();
  _impl_.params_.~MapField();
  _impl_.user_name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.db_name_.Destroy();
  _impl_.space_name_.Destroy();
  _impl_.client_type_.Destroy();
}

void RequestHead::ArenaDtor(void* object) {
  RequestHead* _this = reinterpret_cast< RequestHead* >(object);
  _this->_impl_.params_.Destruct();
}
void RequestHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestHead::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.RequestHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.user_name_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.db_name_.ClearToEmpty();
  _impl_.space_name_.ClearToEmpty();
  _impl_.client_type_.ClearToEmpty();
  _impl_.time_out_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time_out_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.time_out_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RequestHead.user_name"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RequestHead.password"));
        } else
          goto handle_unusual;
        continue;
      // string db_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_db_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RequestHead.db_name"));
        } else
          goto handle_unusual;
        continue;
      // string space_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_space_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RequestHead.space_name"));
        } else
          goto handle_unusual;
        continue;
      // string client_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_client_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RequestHead.client_type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.RequestHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_out_ms = 1;
  if (this->_internal_time_out_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_out_ms(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RequestHead.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RequestHead.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_name().data(), static_cast<int>(this->_internal_db_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RequestHead.db_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_db_name(), target);
  }

  // string space_name = 5;
  if (!this->_internal_space_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_space_name().data(), static_cast<int>(this->_internal_space_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RequestHead.space_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_space_name(), target);
  }

  // string client_type = 6;
  if (!this->_internal_client_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_type().data(), static_cast<int>(this->_internal_client_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RequestHead.client_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_client_type(), target);
  }

  // map<string, string> params = 7;
  if (!this->_internal_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RequestHead_ParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.RequestHead.ParamsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.RequestHead.ParamsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.RequestHead)
  return target;
}

size_t RequestHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.RequestHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += RequestHead_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string db_name = 4;
  if (!this->_internal_db_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_name());
  }

  // string space_name = 5;
  if (!this->_internal_space_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_space_name());
  }

  // string client_type = 6;
  if (!this->_internal_client_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_type());
  }

  // int64 time_out_ms = 1;
  if (this->_internal_time_out_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_out_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHead::GetClassData() const { return &_class_data_; }


void RequestHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestHead*>(&to_msg);
  auto& from = static_cast<const RequestHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.RequestHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_db_name().empty()) {
    _this->_internal_set_db_name(from._internal_db_name());
  }
  if (!from._internal_space_name().empty()) {
    _this->_internal_set_space_name(from._internal_space_name());
  }
  if (!from._internal_client_type().empty()) {
    _this->_internal_set_client_type(from._internal_client_type());
  }
  if (from._internal_time_out_ms() != 0) {
    _this->_internal_set_time_out_ms(from._internal_time_out_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHead::CopyFrom(const RequestHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.RequestHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHead::IsInitialized() const {
  return true;
}

void RequestHead::InternalSwap(RequestHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_name_, lhs_arena,
      &other->_impl_.user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_name_, lhs_arena,
      &other->_impl_.db_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.space_name_, lhs_arena,
      &other->_impl_.space_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_type_, lhs_arena,
      &other->_impl_.client_type_, rhs_arena
  );
  swap(_impl_.time_out_ms_, other->_impl_.time_out_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[1]);
}

// ===================================================================

ResponseHead_ParamsEntry_DoNotUse::ResponseHead_ParamsEntry_DoNotUse() {}
ResponseHead_ParamsEntry_DoNotUse::ResponseHead_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ResponseHead_ParamsEntry_DoNotUse::MergeFrom(const ResponseHead_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ResponseHead_ParamsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[2]);
}

// ===================================================================

class ResponseHead::_Internal {
 public:
  static const ::vearchpb::Error& err(const ResponseHead* msg);
};

const ::vearchpb::Error&
ResponseHead::_Internal::err(const ResponseHead* msg) {
  return *msg->_impl_.err_;
}
void ResponseHead::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
ResponseHead::ResponseHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ResponseHead::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:vearchpb.ResponseHead)
}
ResponseHead::ResponseHead(const ResponseHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.params_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::vearchpb::Error(*from._impl_.err_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.ResponseHead)
}

inline void ResponseHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.params_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.err_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseHead::~ResponseHead() {
  // @@protoc_insertion_point(destructor:vearchpb.ResponseHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ResponseHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.Destruct();
  _impl_.params_.~MapField();
  _impl_.request_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.err_;
}

void ResponseHead::ArenaDtor(void* object) {
  ResponseHead* _this = reinterpret_cast< ResponseHead* >(object);
  _this->_impl_.params_.Destruct();
}
void ResponseHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseHead::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.ResponseHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.ResponseHead.request_id"));
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.Error err = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.ResponseHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.ResponseHead.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .vearchpb.Error err = 2;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  // map<string, string> params = 3;
  if (!this->_internal_params().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ResponseHead_ParamsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_params();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.ResponseHead.ParamsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.ResponseHead.ParamsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.ResponseHead)
  return target;
}

size_t ResponseHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.ResponseHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += ResponseHead_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .vearchpb.Error err = 2;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHead::GetClassData() const { return &_class_data_; }


void ResponseHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseHead*>(&to_msg);
  auto& from = static_cast<const ResponseHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.ResponseHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::vearchpb::Error::MergeFrom(
        from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHead::CopyFrom(const ResponseHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.ResponseHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHead::IsInitialized() const {
  return true;
}

void ResponseHead::InternalSwap(ResponseHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[3]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const GetRequest* msg);
};

const ::vearchpb::RequestHead&
GetRequest::_Internal::head(const GetRequest* msg) {
  return *msg->_impl_.head_;
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_keys_){from._impl_.primary_keys_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.GetRequest)
}

inline void GetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_keys_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.primary_keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.primary_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string primary_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_primary_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.GetRequest.primary_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated string primary_keys = 2;
  for (int i = 0, n = this->_internal_primary_keys_size(); i < n; i++) {
    const auto& s = this->_internal_primary_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.GetRequest.primary_keys");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string primary_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.primary_keys_.size());
  for (int i = 0, n = _impl_.primary_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.primary_keys_.Get(i));
  }

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.primary_keys_.MergeFrom(from._impl_.primary_keys_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.primary_keys_.InternalSwap(&other->_impl_.primary_keys_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[4]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const DeleteRequest* msg);
};

const ::vearchpb::RequestHead&
DeleteRequest::_Internal::head(const DeleteRequest* msg) {
  return *msg->_impl_.head_;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_keys_){from._impl_.primary_keys_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.DeleteRequest)
}

inline void DeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.primary_keys_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.primary_keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.primary_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string primary_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_primary_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.DeleteRequest.primary_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated string primary_keys = 2;
  for (int i = 0, n = this->_internal_primary_keys_size(); i < n; i++) {
    const auto& s = this->_internal_primary_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.DeleteRequest.primary_keys");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string primary_keys = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.primary_keys_.size());
  for (int i = 0, n = _impl_.primary_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.primary_keys_.Get(i));
  }

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.primary_keys_.MergeFrom(from._impl_.primary_keys_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.primary_keys_.InternalSwap(&other->_impl_.primary_keys_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[5]);
}

// ===================================================================

class BulkRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const BulkRequest* msg);
};

const ::vearchpb::RequestHead&
BulkRequest::_Internal::head(const BulkRequest* msg) {
  return *msg->_impl_.head_;
}
void BulkRequest::clear_docs() {
  _impl_.docs_.Clear();
}
BulkRequest::BulkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.BulkRequest)
}
BulkRequest::BulkRequest(const BulkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.docs_){from._impl_.docs_}
    , decltype(_impl_.partitions_){from._impl_.partitions_}
    , /*decltype(_impl_._partitions_cached_byte_size_)*/{0}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.BulkRequest)
}

inline void BulkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.docs_){arena}
    , decltype(_impl_.partitions_){arena}
    , /*decltype(_impl_._partitions_cached_byte_size_)*/{0}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkRequest::~BulkRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.BulkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.docs_.~RepeatedPtrField();
  _impl_.partitions_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void BulkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.BulkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.docs_.Clear();
  _impl_.partitions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Document docs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_docs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 partitions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_partitions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_partitions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.BulkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.Document docs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_docs_size()); i < n; i++) {
    const auto& repfield = this->_internal_docs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 partitions = 3;
  {
    int byte_size = _impl_._partitions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_partitions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.BulkRequest)
  return target;
}

size_t BulkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.BulkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Document docs = 2;
  total_size += 1UL * this->_internal_docs_size();
  for (const auto& msg : this->_impl_.docs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 partitions = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._partitions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkRequest::GetClassData() const { return &_class_data_; }


void BulkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkRequest*>(&to_msg);
  auto& from = static_cast<const BulkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.BulkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.docs_.MergeFrom(from._impl_.docs_);
  _this->_impl_.partitions_.MergeFrom(from._impl_.partitions_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkRequest::CopyFrom(const BulkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.BulkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkRequest::IsInitialized() const {
  return true;
}

void BulkRequest::InternalSwap(BulkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.docs_.InternalSwap(&other->_impl_.docs_);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[6]);
}

// ===================================================================

class ForceMergeRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const ForceMergeRequest* msg);
};

const ::vearchpb::RequestHead&
ForceMergeRequest::_Internal::head(const ForceMergeRequest* msg) {
  return *msg->_impl_.head_;
}
ForceMergeRequest::ForceMergeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.ForceMergeRequest)
}
ForceMergeRequest::ForceMergeRequest(const ForceMergeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForceMergeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.ForceMergeRequest)
}

inline void ForceMergeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForceMergeRequest::~ForceMergeRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.ForceMergeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForceMergeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
}

void ForceMergeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForceMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.ForceMergeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForceMergeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForceMergeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.ForceMergeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.ForceMergeRequest)
  return target;
}

size_t ForceMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.ForceMergeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForceMergeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForceMergeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForceMergeRequest::GetClassData() const { return &_class_data_; }


void ForceMergeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForceMergeRequest*>(&to_msg);
  auto& from = static_cast<const ForceMergeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.ForceMergeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForceMergeRequest::CopyFrom(const ForceMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.ForceMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceMergeRequest::IsInitialized() const {
  return true;
}

void ForceMergeRequest::InternalSwap(ForceMergeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForceMergeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[7]);
}

// ===================================================================

class FlushRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const FlushRequest* msg);
};

const ::vearchpb::RequestHead&
FlushRequest::_Internal::head(const FlushRequest* msg) {
  return *msg->_impl_.head_;
}
FlushRequest::FlushRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.FlushRequest)
}
FlushRequest::FlushRequest(const FlushRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.FlushRequest)
}

inline void FlushRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushRequest::~FlushRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.FlushRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
}

void FlushRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.FlushRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.FlushRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.FlushRequest)
  return target;
}

size_t FlushRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.FlushRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushRequest::GetClassData() const { return &_class_data_; }


void FlushRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushRequest*>(&to_msg);
  auto& from = static_cast<const FlushRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.FlushRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushRequest::CopyFrom(const FlushRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.FlushRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushRequest::IsInitialized() const {
  return true;
}

void FlushRequest::InternalSwap(FlushRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[8]);
}

// ===================================================================

class IndexRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const IndexRequest* msg);
};

const ::vearchpb::RequestHead&
IndexRequest::_Internal::head(const IndexRequest* msg) {
  return *msg->_impl_.head_;
}
IndexRequest::IndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.IndexRequest)
}
IndexRequest::IndexRequest(const IndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.drop_before_rebuild_){}
    , decltype(_impl_.limit_cpu_){}
    , decltype(_impl_.describe_){}
    , decltype(_impl_.partition_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  ::memcpy(&_impl_.drop_before_rebuild_, &from._impl_.drop_before_rebuild_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partition_id_) -
    reinterpret_cast<char*>(&_impl_.drop_before_rebuild_)) + sizeof(_impl_.partition_id_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.IndexRequest)
}

inline void IndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.drop_before_rebuild_){int64_t{0}}
    , decltype(_impl_.limit_cpu_){int64_t{0}}
    , decltype(_impl_.describe_){int64_t{0}}
    , decltype(_impl_.partition_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexRequest::~IndexRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.IndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
}

void IndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.IndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  ::memset(&_impl_.drop_before_rebuild_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partition_id_) -
      reinterpret_cast<char*>(&_impl_.drop_before_rebuild_)) + sizeof(_impl_.partition_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 drop_before_rebuild = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.drop_before_rebuild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 limit_cpu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 describe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.describe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 partition_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.IndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int64 drop_before_rebuild = 2;
  if (this->_internal_drop_before_rebuild() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_drop_before_rebuild(), target);
  }

  // int64 limit_cpu = 3;
  if (this->_internal_limit_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit_cpu(), target);
  }

  // int64 describe = 4;
  if (this->_internal_describe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_describe(), target);
  }

  // uint32 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_partition_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.IndexRequest)
  return target;
}

size_t IndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.IndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // int64 drop_before_rebuild = 2;
  if (this->_internal_drop_before_rebuild() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_drop_before_rebuild());
  }

  // int64 limit_cpu = 3;
  if (this->_internal_limit_cpu() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_limit_cpu());
  }

  // int64 describe = 4;
  if (this->_internal_describe() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_describe());
  }

  // uint32 partition_id = 5;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partition_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRequest::GetClassData() const { return &_class_data_; }


void IndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRequest*>(&to_msg);
  auto& from = static_cast<const IndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.IndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_drop_before_rebuild() != 0) {
    _this->_internal_set_drop_before_rebuild(from._internal_drop_before_rebuild());
  }
  if (from._internal_limit_cpu() != 0) {
    _this->_internal_set_limit_cpu(from._internal_limit_cpu());
  }
  if (from._internal_describe() != 0) {
    _this->_internal_set_describe(from._internal_describe());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  return true;
}

void IndexRequest::InternalSwap(IndexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexRequest, _impl_.partition_id_)
      + sizeof(IndexRequest::_impl_.partition_id_)
      - PROTOBUF_FIELD_OFFSET(IndexRequest, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[9]);
}

// ===================================================================

class GetResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const GetResponse* msg);
};

const ::vearchpb::ResponseHead&
GetResponse::_Internal::head(const GetResponse* msg) {
  return *msg->_impl_.head_;
}
void GetResponse::clear_items() {
  _impl_.items_.Clear();
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.GetResponse)
}

inline void GetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.GetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void GetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.GetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.GetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.GetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }


void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[10]);
}

// ===================================================================

class DeleteResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const DeleteResponse* msg);
};

const ::vearchpb::ResponseHead&
DeleteResponse::_Internal::head(const DeleteResponse* msg) {
  return *msg->_impl_.head_;
}
void DeleteResponse::clear_items() {
  _impl_.items_.Clear();
}
DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.DeleteResponse)
}

inline void DeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.DeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void DeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.DeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.DeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.DeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }


void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteResponse*>(&to_msg);
  auto& from = static_cast<const DeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[11]);
}

// ===================================================================

class BulkResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const BulkResponse* msg);
};

const ::vearchpb::ResponseHead&
BulkResponse::_Internal::head(const BulkResponse* msg) {
  return *msg->_impl_.head_;
}
void BulkResponse::clear_items() {
  _impl_.items_.Clear();
}
BulkResponse::BulkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.BulkResponse)
}
BulkResponse::BulkResponse(const BulkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.BulkResponse)
}

inline void BulkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.head_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkResponse::~BulkResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.BulkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void BulkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.BulkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.BulkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.Item items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.BulkResponse)
  return target;
}

size_t BulkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.BulkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkResponse::GetClassData() const { return &_class_data_; }


void BulkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkResponse*>(&to_msg);
  auto& from = static_cast<const BulkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.BulkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkResponse::CopyFrom(const BulkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.BulkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkResponse::IsInitialized() const {
  return true;
}

void BulkResponse::InternalSwap(BulkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[12]);
}

// ===================================================================

class ForceMergeResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const ForceMergeResponse* msg);
  static const ::vearchpb::SearchStatus& shards(const ForceMergeResponse* msg);
};

const ::vearchpb::ResponseHead&
ForceMergeResponse::_Internal::head(const ForceMergeResponse* msg) {
  return *msg->_impl_.head_;
}
const ::vearchpb::SearchStatus&
ForceMergeResponse::_Internal::shards(const ForceMergeResponse* msg) {
  return *msg->_impl_.shards_;
}
ForceMergeResponse::ForceMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.ForceMergeResponse)
}
ForceMergeResponse::ForceMergeResponse(const ForceMergeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForceMergeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  if (from._internal_has_shards()) {
    _this->_impl_.shards_ = new ::vearchpb::SearchStatus(*from._impl_.shards_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.ForceMergeResponse)
}

inline void ForceMergeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForceMergeResponse::~ForceMergeResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.ForceMergeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForceMergeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
  if (this != internal_default_instance()) delete _impl_.shards_;
}

void ForceMergeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForceMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.ForceMergeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shards_ != nullptr) {
    delete _impl_.shards_;
  }
  _impl_.shards_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForceMergeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchStatus shards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForceMergeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.ForceMergeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shards(this),
        _Internal::shards(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.ForceMergeResponse)
  return target;
}

size_t ForceMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.ForceMergeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shards_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForceMergeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForceMergeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForceMergeResponse::GetClassData() const { return &_class_data_; }


void ForceMergeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForceMergeResponse*>(&to_msg);
  auto& from = static_cast<const ForceMergeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.ForceMergeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_has_shards()) {
    _this->_internal_mutable_shards()->::vearchpb::SearchStatus::MergeFrom(
        from._internal_shards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForceMergeResponse::CopyFrom(const ForceMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.ForceMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceMergeResponse::IsInitialized() const {
  return true;
}

void ForceMergeResponse::InternalSwap(ForceMergeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForceMergeResponse, _impl_.shards_)
      + sizeof(ForceMergeResponse::_impl_.shards_)
      - PROTOBUF_FIELD_OFFSET(ForceMergeResponse, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForceMergeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[13]);
}

// ===================================================================

class DelByQueryeResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const DelByQueryeResponse* msg);
};

const ::vearchpb::ResponseHead&
DelByQueryeResponse::_Internal::head(const DelByQueryeResponse* msg) {
  return *msg->_impl_.head_;
}
DelByQueryeResponse::DelByQueryeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.DelByQueryeResponse)
}
DelByQueryeResponse::DelByQueryeResponse(const DelByQueryeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelByQueryeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_str_){from._impl_.ids_str_}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.delnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  _this->_impl_.delnum_ = from._impl_.delnum_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.DelByQueryeResponse)
}

inline void DelByQueryeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_str_){arena}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.delnum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DelByQueryeResponse::~DelByQueryeResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.DelByQueryeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelByQueryeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_str_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void DelByQueryeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelByQueryeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.DelByQueryeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_str_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _impl_.delnum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelByQueryeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DelNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.delnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ids_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids_str();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.DelByQueryeResponse.ids_str"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelByQueryeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.DelByQueryeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int32 DelNum = 2;
  if (this->_internal_delnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_delnum(), target);
  }

  // repeated string ids_str = 3;
  for (int i = 0, n = this->_internal_ids_str_size(); i < n; i++) {
    const auto& s = this->_internal_ids_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.DelByQueryeResponse.ids_str");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.DelByQueryeResponse)
  return target;
}

size_t DelByQueryeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.DelByQueryeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids_str = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ids_str_.size());
  for (int i = 0, n = _impl_.ids_str_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ids_str_.Get(i));
  }

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // int32 DelNum = 2;
  if (this->_internal_delnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelByQueryeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelByQueryeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelByQueryeResponse::GetClassData() const { return &_class_data_; }


void DelByQueryeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelByQueryeResponse*>(&to_msg);
  auto& from = static_cast<const DelByQueryeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.DelByQueryeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_str_.MergeFrom(from._impl_.ids_str_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_delnum() != 0) {
    _this->_internal_set_delnum(from._internal_delnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelByQueryeResponse::CopyFrom(const DelByQueryeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.DelByQueryeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelByQueryeResponse::IsInitialized() const {
  return true;
}

void DelByQueryeResponse::InternalSwap(DelByQueryeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_str_.InternalSwap(&other->_impl_.ids_str_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelByQueryeResponse, _impl_.delnum_)
      + sizeof(DelByQueryeResponse::_impl_.delnum_)
      - PROTOBUF_FIELD_OFFSET(DelByQueryeResponse, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelByQueryeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[14]);
}

// ===================================================================

class FlushResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const FlushResponse* msg);
  static const ::vearchpb::SearchStatus& shards(const FlushResponse* msg);
};

const ::vearchpb::ResponseHead&
FlushResponse::_Internal::head(const FlushResponse* msg) {
  return *msg->_impl_.head_;
}
const ::vearchpb::SearchStatus&
FlushResponse::_Internal::shards(const FlushResponse* msg) {
  return *msg->_impl_.shards_;
}
FlushResponse::FlushResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.FlushResponse)
}
FlushResponse::FlushResponse(const FlushResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlushResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  if (from._internal_has_shards()) {
    _this->_impl_.shards_ = new ::vearchpb::SearchStatus(*from._impl_.shards_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.FlushResponse)
}

inline void FlushResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FlushResponse::~FlushResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.FlushResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlushResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
  if (this != internal_default_instance()) delete _impl_.shards_;
}

void FlushResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlushResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.FlushResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shards_ != nullptr) {
    delete _impl_.shards_;
  }
  _impl_.shards_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlushResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchStatus shards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlushResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.FlushResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shards(this),
        _Internal::shards(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.FlushResponse)
  return target;
}

size_t FlushResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.FlushResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shards_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlushResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlushResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlushResponse::GetClassData() const { return &_class_data_; }


void FlushResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlushResponse*>(&to_msg);
  auto& from = static_cast<const FlushResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.FlushResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_has_shards()) {
    _this->_internal_mutable_shards()->::vearchpb::SearchStatus::MergeFrom(
        from._internal_shards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlushResponse::CopyFrom(const FlushResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.FlushResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushResponse::IsInitialized() const {
  return true;
}

void FlushResponse::InternalSwap(FlushResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.shards_)
      + sizeof(FlushResponse::_impl_.shards_)
      - PROTOBUF_FIELD_OFFSET(FlushResponse, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlushResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[15]);
}

// ===================================================================

class IndexResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const IndexResponse* msg);
  static const ::vearchpb::SearchStatus& shards(const IndexResponse* msg);
};

const ::vearchpb::ResponseHead&
IndexResponse::_Internal::head(const IndexResponse* msg) {
  return *msg->_impl_.head_;
}
const ::vearchpb::SearchStatus&
IndexResponse::_Internal::shards(const IndexResponse* msg) {
  return *msg->_impl_.shards_;
}
IndexResponse::IndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.IndexResponse)
}
IndexResponse::IndexResponse(const IndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  if (from._internal_has_shards()) {
    _this->_impl_.shards_ = new ::vearchpb::SearchStatus(*from._impl_.shards_);
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.IndexResponse)
}

inline void IndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.head_){nullptr}
    , decltype(_impl_.shards_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexResponse::~IndexResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.IndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.head_;
  if (this != internal_default_instance()) delete _impl_.shards_;
}

void IndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.IndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shards_ != nullptr) {
    delete _impl_.shards_;
  }
  _impl_.shards_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchStatus shards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.IndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shards(this),
        _Internal::shards(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.IndexResponse)
  return target;
}

size_t IndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.IndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // .vearchpb.SearchStatus shards = 2;
  if (this->_internal_has_shards()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shards_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexResponse::GetClassData() const { return &_class_data_; }


void IndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexResponse*>(&to_msg);
  auto& from = static_cast<const IndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.IndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_has_shards()) {
    _this->_internal_mutable_shards()->::vearchpb::SearchStatus::MergeFrom(
        from._internal_shards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexResponse::CopyFrom(const IndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.IndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexResponse::IsInitialized() const {
  return true;
}

void IndexResponse::InternalSwap(IndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexResponse, _impl_.shards_)
      + sizeof(IndexResponse::_impl_.shards_)
      - PROTOBUF_FIELD_OFFSET(IndexResponse, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[16]);
}

// ===================================================================

class TermFilter::_Internal {
 public:
};

TermFilter::TermFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.TermFilter)
}
TermFilter::TermFilter(const TermFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TermFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.is_union_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_union_ = from._impl_.is_union_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.TermFilter)
}

inline void TermFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.is_union_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TermFilter::~TermFilter() {
  // @@protoc_insertion_point(destructor:vearchpb.TermFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TermFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  _impl_.value_.Destroy();
}

void TermFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TermFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.TermFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.is_union_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TermFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.TermFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_union = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_union_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TermFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.TermFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.TermFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 is_union = 3;
  if (this->_internal_is_union() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_union(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.TermFilter)
  return target;
}

size_t TermFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.TermFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 is_union = 3;
  if (this->_internal_is_union() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_union());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TermFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TermFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TermFilter::GetClassData() const { return &_class_data_; }


void TermFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TermFilter*>(&to_msg);
  auto& from = static_cast<const TermFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.TermFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_is_union() != 0) {
    _this->_internal_set_is_union(from._internal_is_union());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TermFilter::CopyFrom(const TermFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.TermFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermFilter::IsInitialized() const {
  return true;
}

void TermFilter::InternalSwap(TermFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.is_union_, other->_impl_.is_union_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TermFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[17]);
}

// ===================================================================

class RangeFilter::_Internal {
 public:
};

RangeFilter::RangeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.RangeFilter)
}
RangeFilter::RangeFilter(const RangeFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.lower_value_){}
    , decltype(_impl_.upper_value_){}
    , decltype(_impl_.include_lower_){}
    , decltype(_impl_.include_upper_){}
    , decltype(_impl_.is_union_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lower_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lower_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lower_value().empty()) {
    _this->_impl_.lower_value_.Set(from._internal_lower_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.upper_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upper_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_upper_value().empty()) {
    _this->_impl_.upper_value_.Set(from._internal_upper_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.include_lower_, &from._impl_.include_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_union_) -
    reinterpret_cast<char*>(&_impl_.include_lower_)) + sizeof(_impl_.is_union_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.RangeFilter)
}

inline void RangeFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.lower_value_){}
    , decltype(_impl_.upper_value_){}
    , decltype(_impl_.include_lower_){false}
    , decltype(_impl_.include_upper_){false}
    , decltype(_impl_.is_union_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lower_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lower_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.upper_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.upper_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RangeFilter::~RangeFilter() {
  // @@protoc_insertion_point(destructor:vearchpb.RangeFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
  _impl_.lower_value_.Destroy();
  _impl_.upper_value_.Destroy();
}

void RangeFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.RangeFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.lower_value_.ClearToEmpty();
  _impl_.upper_value_.ClearToEmpty();
  ::memset(&_impl_.include_lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_union_) -
      reinterpret_cast<char*>(&_impl_.include_lower_)) + sizeof(_impl_.is_union_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.RangeFilter.field"));
        } else
          goto handle_unusual;
        continue;
      // bytes lower_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lower_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes upper_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_upper_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_lower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.include_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_upper = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_union = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_union_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.RangeFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.RangeFilter.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // bytes lower_value = 2;
  if (!this->_internal_lower_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_lower_value(), target);
  }

  // bytes upper_value = 3;
  if (!this->_internal_upper_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_upper_value(), target);
  }

  // bool include_lower = 4;
  if (this->_internal_include_lower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_include_lower(), target);
  }

  // bool include_upper = 5;
  if (this->_internal_include_upper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_upper(), target);
  }

  // int32 is_union = 6;
  if (this->_internal_is_union() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_is_union(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.RangeFilter)
  return target;
}

size_t RangeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.RangeFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // bytes lower_value = 2;
  if (!this->_internal_lower_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lower_value());
  }

  // bytes upper_value = 3;
  if (!this->_internal_upper_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_upper_value());
  }

  // bool include_lower = 4;
  if (this->_internal_include_lower() != 0) {
    total_size += 1 + 1;
  }

  // bool include_upper = 5;
  if (this->_internal_include_upper() != 0) {
    total_size += 1 + 1;
  }

  // int32 is_union = 6;
  if (this->_internal_is_union() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_union());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeFilter::GetClassData() const { return &_class_data_; }


void RangeFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeFilter*>(&to_msg);
  auto& from = static_cast<const RangeFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.RangeFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (!from._internal_lower_value().empty()) {
    _this->_internal_set_lower_value(from._internal_lower_value());
  }
  if (!from._internal_upper_value().empty()) {
    _this->_internal_set_upper_value(from._internal_upper_value());
  }
  if (from._internal_include_lower() != 0) {
    _this->_internal_set_include_lower(from._internal_include_lower());
  }
  if (from._internal_include_upper() != 0) {
    _this->_internal_set_include_upper(from._internal_include_upper());
  }
  if (from._internal_is_union() != 0) {
    _this->_internal_set_is_union(from._internal_is_union());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeFilter::CopyFrom(const RangeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.RangeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeFilter::IsInitialized() const {
  return true;
}

void RangeFilter::InternalSwap(RangeFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lower_value_, lhs_arena,
      &other->_impl_.lower_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.upper_value_, lhs_arena,
      &other->_impl_.upper_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeFilter, _impl_.is_union_)
      + sizeof(RangeFilter::_impl_.is_union_)
      - PROTOBUF_FIELD_OFFSET(RangeFilter, _impl_.include_lower_)>(
          reinterpret_cast<char*>(&_impl_.include_lower_),
          reinterpret_cast<char*>(&other->_impl_.include_lower_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[18]);
}

// ===================================================================

class SortField::_Internal {
 public:
};

SortField::SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.SortField)
}
SortField::SortField(const SortField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SortField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field().empty()) {
    _this->_impl_.field_.Set(from._internal_field(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.SortField)
}

inline void SortField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){}
    , decltype(_impl_.type_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.field_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SortField::~SortField() {
  // @@protoc_insertion_point(destructor:vearchpb.SortField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SortField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_.Destroy();
}

void SortField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SortField::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SortField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_.ClearToEmpty();
  _impl_.type_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SortField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SortField.field"));
        } else
          goto handle_unusual;
        continue;
      // bool type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SortField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SortField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SortField.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // bool type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SortField)
  return target;
}

size_t SortField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SortField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 1;
  if (!this->_internal_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // bool type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SortField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SortField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SortField::GetClassData() const { return &_class_data_; }


void SortField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SortField*>(&to_msg);
  auto& from = static_cast<const SortField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SortField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field().empty()) {
    _this->_internal_set_field(from._internal_field());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SortField::CopyFrom(const SortField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SortField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortField::IsInitialized() const {
  return true;
}

void SortField::InternalSwap(SortField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.field_, lhs_arena,
      &other->_impl_.field_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SortField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[19]);
}

// ===================================================================

class VectorQuery::_Internal {
 public:
};

VectorQuery::VectorQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.VectorQuery)
}
VectorQuery::VectorQuery(const VectorQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.index_type_){}
    , decltype(_impl_.min_score_){}
    , decltype(_impl_.max_score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.index_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_type().empty()) {
    _this->_impl_.index_type_.Set(from._internal_index_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.min_score_, &from._impl_.min_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_score_) -
    reinterpret_cast<char*>(&_impl_.min_score_)) + sizeof(_impl_.max_score_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.VectorQuery)
}

inline void VectorQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.index_type_){}
    , decltype(_impl_.min_score_){0}
    , decltype(_impl_.max_score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VectorQuery::~VectorQuery() {
  // @@protoc_insertion_point(destructor:vearchpb.VectorQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  _impl_.format_.Destroy();
  _impl_.index_type_.Destroy();
}

void VectorQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.VectorQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  _impl_.index_type_.ClearToEmpty();
  ::memset(&_impl_.min_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.max_score_) -
      reinterpret_cast<char*>(&_impl_.min_score_)) + sizeof(_impl_.max_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.VectorQuery.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double min_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.min_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string format = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.VectorQuery.format"));
        } else
          goto handle_unusual;
        continue;
      // string index_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_index_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.VectorQuery.index_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.VectorQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.VectorQuery.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // double min_score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = this->_internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_score(), target);
  }

  // double max_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = this->_internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_score(), target);
  }

  // string format = 5;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.VectorQuery.format");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_format(), target);
  }

  // string index_type = 6;
  if (!this->_internal_index_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_type().data(), static_cast<int>(this->_internal_index_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.VectorQuery.index_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_index_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.VectorQuery)
  return target;
}

size_t VectorQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.VectorQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string format = 5;
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string index_type = 6;
  if (!this->_internal_index_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_type());
  }

  // double min_score = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = this->_internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    total_size += 1 + 8;
  }

  // double max_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = this->_internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorQuery::GetClassData() const { return &_class_data_; }


void VectorQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorQuery*>(&to_msg);
  auto& from = static_cast<const VectorQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.VectorQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (!from._internal_index_type().empty()) {
    _this->_internal_set_index_type(from._internal_index_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_score = from._internal_min_score();
  uint64_t raw_min_score;
  memcpy(&raw_min_score, &tmp_min_score, sizeof(tmp_min_score));
  if (raw_min_score != 0) {
    _this->_internal_set_min_score(from._internal_min_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = from._internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    _this->_internal_set_max_score(from._internal_max_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorQuery::CopyFrom(const VectorQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.VectorQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorQuery::IsInitialized() const {
  return true;
}

void VectorQuery::InternalSwap(VectorQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.format_, lhs_arena,
      &other->_impl_.format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_type_, lhs_arena,
      &other->_impl_.index_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorQuery, _impl_.max_score_)
      + sizeof(VectorQuery::_impl_.max_score_)
      - PROTOBUF_FIELD_OFFSET(VectorQuery, _impl_.min_score_)>(
          reinterpret_cast<char*>(&_impl_.min_score_),
          reinterpret_cast<char*>(&other->_impl_.min_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[20]);
}

// ===================================================================

class IndexParameters::_Internal {
 public:
};

IndexParameters::IndexParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.IndexParameters)
}
IndexParameters::IndexParameters(const IndexParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_type_){}
    , decltype(_impl_.nprobe_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.metric_type_, &from._impl_.metric_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nprobe_) -
    reinterpret_cast<char*>(&_impl_.metric_type_)) + sizeof(_impl_.nprobe_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.IndexParameters)
}

inline void IndexParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metric_type_){0}
    , decltype(_impl_.nprobe_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexParameters::~IndexParameters() {
  // @@protoc_insertion_point(destructor:vearchpb.IndexParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.IndexParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.metric_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nprobe_) -
      reinterpret_cast<char*>(&_impl_.metric_type_)) + sizeof(_impl_.nprobe_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.IndexParameters.DistanceMetricType metric_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_metric_type(static_cast<::vearchpb::IndexParameters_DistanceMetricType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 nprobe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nprobe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.IndexParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.IndexParameters.DistanceMetricType metric_type = 1;
  if (this->_internal_metric_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_metric_type(), target);
  }

  // int32 nprobe = 2;
  if (this->_internal_nprobe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nprobe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.IndexParameters)
  return target;
}

size_t IndexParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.IndexParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.IndexParameters.DistanceMetricType metric_type = 1;
  if (this->_internal_metric_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_metric_type());
  }

  // int32 nprobe = 2;
  if (this->_internal_nprobe() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nprobe());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexParameters::GetClassData() const { return &_class_data_; }


void IndexParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexParameters*>(&to_msg);
  auto& from = static_cast<const IndexParameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.IndexParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metric_type() != 0) {
    _this->_internal_set_metric_type(from._internal_metric_type());
  }
  if (from._internal_nprobe() != 0) {
    _this->_internal_set_nprobe(from._internal_nprobe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexParameters::CopyFrom(const IndexParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.IndexParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexParameters::IsInitialized() const {
  return true;
}

void IndexParameters::InternalSwap(IndexParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexParameters, _impl_.nprobe_)
      + sizeof(IndexParameters::_impl_.nprobe_)
      - PROTOBUF_FIELD_OFFSET(IndexParameters, _impl_.metric_type_)>(
          reinterpret_cast<char*>(&_impl_.metric_type_),
          reinterpret_cast<char*>(&other->_impl_.metric_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[21]);
}

// ===================================================================

QueryRequest_SortFieldMapEntry_DoNotUse::QueryRequest_SortFieldMapEntry_DoNotUse() {}
QueryRequest_SortFieldMapEntry_DoNotUse::QueryRequest_SortFieldMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryRequest_SortFieldMapEntry_DoNotUse::MergeFrom(const QueryRequest_SortFieldMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest_SortFieldMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[22]);
}

// ===================================================================

class QueryRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const QueryRequest* msg);
};

const ::vearchpb::RequestHead&
QueryRequest::_Internal::head(const QueryRequest* msg) {
  return *msg->_impl_.head_;
}
QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &QueryRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:vearchpb.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.document_ids_){from._impl_.document_ids_}
    , decltype(_impl_.range_filters_){from._impl_.range_filters_}
    , decltype(_impl_.term_filters_){from._impl_.term_filters_}
    , decltype(_impl_.fields_){from._impl_.fields_}
    , /*decltype(_impl_.sort_field_map_)*/{}
    , decltype(_impl_.sort_fields_){from._impl_.sort_fields_}
    , decltype(_impl_.load_balance_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.partition_id_){}
    , decltype(_impl_.next_){}
    , decltype(_impl_.is_vector_value_){}
    , decltype(_impl_.trace_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.operator__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sort_field_map_.MergeFrom(from._impl_.sort_field_map_);
  _impl_.load_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_load_balance().empty()) {
    _this->_impl_.load_balance_.Set(from._internal_load_balance(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  ::memcpy(&_impl_.partition_id_, &from._impl_.partition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operator__) -
    reinterpret_cast<char*>(&_impl_.partition_id_)) + sizeof(_impl_.operator__));
  // @@protoc_insertion_point(copy_constructor:vearchpb.QueryRequest)
}

inline void QueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.document_ids_){arena}
    , decltype(_impl_.range_filters_){arena}
    , decltype(_impl_.term_filters_){arena}
    , decltype(_impl_.fields_){arena}
    , /*decltype(_impl_.sort_field_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sort_fields_){arena}
    , decltype(_impl_.load_balance_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.partition_id_){0}
    , decltype(_impl_.next_){false}
    , decltype(_impl_.is_vector_value_){false}
    , decltype(_impl_.trace_){false}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.page_size_){0}
    , decltype(_impl_.operator__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.load_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.load_balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.QueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.document_ids_.~RepeatedPtrField();
  _impl_.range_filters_.~RepeatedPtrField();
  _impl_.term_filters_.~RepeatedPtrField();
  _impl_.fields_.~RepeatedPtrField();
  _impl_.sort_field_map_.Destruct();
  _impl_.sort_field_map_.~MapField();
  _impl_.sort_fields_.~RepeatedPtrField();
  _impl_.load_balance_.Destroy();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast< QueryRequest* >(object);
  _this->_impl_.sort_field_map_.Destruct();
}
void QueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.QueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.document_ids_.Clear();
  _impl_.range_filters_.Clear();
  _impl_.term_filters_.Clear();
  _impl_.fields_.Clear();
  _impl_.sort_field_map_.Clear();
  _impl_.sort_fields_.Clear();
  _impl_.load_balance_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  ::memset(&_impl_.partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.operator__) -
      reinterpret_cast<char*>(&_impl_.partition_id_)) + sizeof(_impl_.operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string document_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_document_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.QueryRequest.document_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 partition_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.RangeFilter range_filters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.TermFilter term_filters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_term_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fields = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.QueryRequest.fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_vector_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.is_vector_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string load_balance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_load_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.QueryRequest.load_balance"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sort_field_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sort_field_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.SortField sort_fields = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sort_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool trace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 operator = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.QueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated string document_ids = 2;
  for (int i = 0, n = this->_internal_document_ids_size(); i < n; i++) {
    const auto& s = this->_internal_document_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.QueryRequest.document_ids");
    target = stream->WriteString(2, s, target);
  }

  // int32 partition_id = 3;
  if (this->_internal_partition_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_id(), target);
  }

  // bool next = 4;
  if (this->_internal_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_next(), target);
  }

  // repeated .vearchpb.RangeFilter range_filters = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.TermFilter term_filters = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_term_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_term_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string fields = 7;
  for (int i = 0, n = this->_internal_fields_size(); i < n; i++) {
    const auto& s = this->_internal_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.QueryRequest.fields");
    target = stream->WriteString(7, s, target);
  }

  // bool is_vector_value = 8;
  if (this->_internal_is_vector_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_vector_value(), target);
  }

  // int32 limit = 9;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_limit(), target);
  }

  // int32 page_size = 10;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_page_size(), target);
  }

  // string load_balance = 11;
  if (!this->_internal_load_balance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_balance().data(), static_cast<int>(this->_internal_load_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.QueryRequest.load_balance");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_load_balance(), target);
  }

  // map<string, string> sort_field_map = 12;
  if (!this->_internal_sort_field_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = QueryRequest_SortFieldMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sort_field_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.QueryRequest.SortFieldMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.QueryRequest.SortFieldMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .vearchpb.SortField sort_fields = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sort_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_sort_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool trace = 14;
  if (this->_internal_trace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_trace(), target);
  }

  // int32 operator = 15;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.QueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string document_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.document_ids_.size());
  for (int i = 0, n = _impl_.document_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.document_ids_.Get(i));
  }

  // repeated .vearchpb.RangeFilter range_filters = 5;
  total_size += 1UL * this->_internal_range_filters_size();
  for (const auto& msg : this->_impl_.range_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vearchpb.TermFilter term_filters = 6;
  total_size += 1UL * this->_internal_term_filters_size();
  for (const auto& msg : this->_impl_.term_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string fields = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fields_.size());
  for (int i = 0, n = _impl_.fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fields_.Get(i));
  }

  // map<string, string> sort_field_map = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sort_field_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sort_field_map().begin();
      it != this->_internal_sort_field_map().end(); ++it) {
    total_size += QueryRequest_SortFieldMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .vearchpb.SortField sort_fields = 13;
  total_size += 1UL * this->_internal_sort_fields_size();
  for (const auto& msg : this->_impl_.sort_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string load_balance = 11;
  if (!this->_internal_load_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_balance());
  }

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // int32 partition_id = 3;
  if (this->_internal_partition_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_id());
  }

  // bool next = 4;
  if (this->_internal_next() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vector_value = 8;
  if (this->_internal_is_vector_value() != 0) {
    total_size += 1 + 1;
  }

  // bool trace = 14;
  if (this->_internal_trace() != 0) {
    total_size += 1 + 1;
  }

  // int32 limit = 9;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 page_size = 10;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // int32 operator = 15;
  if (this->_internal_operator_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRequest::GetClassData() const { return &_class_data_; }


void QueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryRequest*>(&to_msg);
  auto& from = static_cast<const QueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.QueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.document_ids_.MergeFrom(from._impl_.document_ids_);
  _this->_impl_.range_filters_.MergeFrom(from._impl_.range_filters_);
  _this->_impl_.term_filters_.MergeFrom(from._impl_.term_filters_);
  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_impl_.sort_field_map_.MergeFrom(from._impl_.sort_field_map_);
  _this->_impl_.sort_fields_.MergeFrom(from._impl_.sort_fields_);
  if (!from._internal_load_balance().empty()) {
    _this->_internal_set_load_balance(from._internal_load_balance());
  }
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_partition_id() != 0) {
    _this->_internal_set_partition_id(from._internal_partition_id());
  }
  if (from._internal_next() != 0) {
    _this->_internal_set_next(from._internal_next());
  }
  if (from._internal_is_vector_value() != 0) {
    _this->_internal_set_is_vector_value(from._internal_is_vector_value());
  }
  if (from._internal_trace() != 0) {
    _this->_internal_set_trace(from._internal_trace());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.document_ids_.InternalSwap(&other->_impl_.document_ids_);
  _impl_.range_filters_.InternalSwap(&other->_impl_.range_filters_);
  _impl_.term_filters_.InternalSwap(&other->_impl_.term_filters_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  _impl_.sort_field_map_.InternalSwap(&other->_impl_.sort_field_map_);
  _impl_.sort_fields_.InternalSwap(&other->_impl_.sort_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.load_balance_, lhs_arena,
      &other->_impl_.load_balance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, _impl_.operator__)
      + sizeof(QueryRequest::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[23]);
}

// ===================================================================

SearchRequest_SortFieldMapEntry_DoNotUse::SearchRequest_SortFieldMapEntry_DoNotUse() {}
SearchRequest_SortFieldMapEntry_DoNotUse::SearchRequest_SortFieldMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SearchRequest_SortFieldMapEntry_DoNotUse::MergeFrom(const SearchRequest_SortFieldMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest_SortFieldMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[24]);
}

// ===================================================================

class SearchRequest::_Internal {
 public:
  static const ::vearchpb::RequestHead& head(const SearchRequest* msg);
};

const ::vearchpb::RequestHead&
SearchRequest::_Internal::head(const SearchRequest* msg) {
  return *msg->_impl_.head_;
}
SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SearchRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:vearchpb.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){from._impl_.vec_fields_}
    , decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.range_filters_){from._impl_.range_filters_}
    , decltype(_impl_.term_filters_){from._impl_.term_filters_}
    , /*decltype(_impl_.sort_field_map_)*/{}
    , decltype(_impl_.sort_fields_){from._impl_.sort_fields_}
    , decltype(_impl_.index_params_){}
    , decltype(_impl_.ranker_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.req_num_){}
    , decltype(_impl_.topn_){}
    , decltype(_impl_.is_brute_search_){}
    , decltype(_impl_.multi_vector_rank_){}
    , decltype(_impl_.l2_sqrt_){}
    , decltype(_impl_.is_vector_value_){}
    , decltype(_impl_.trace_){}
    , decltype(_impl_.operator__){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sort_field_map_.MergeFrom(from._impl_.sort_field_map_);
  _impl_.index_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_params().empty()) {
    _this->_impl_.index_params_.Set(from._internal_index_params(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ranker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ranker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ranker().empty()) {
    _this->_impl_.ranker_.Set(from._internal_ranker(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::RequestHead(*from._impl_.head_);
  }
  ::memcpy(&_impl_.req_num_, &from._impl_.req_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operator__) -
    reinterpret_cast<char*>(&_impl_.req_num_)) + sizeof(_impl_.operator__));
  // @@protoc_insertion_point(copy_constructor:vearchpb.SearchRequest)
}

inline void SearchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vec_fields_){arena}
    , decltype(_impl_.fields_){arena}
    , decltype(_impl_.range_filters_){arena}
    , decltype(_impl_.term_filters_){arena}
    , /*decltype(_impl_.sort_field_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sort_fields_){arena}
    , decltype(_impl_.index_params_){}
    , decltype(_impl_.ranker_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.req_num_){0}
    , decltype(_impl_.topn_){0}
    , decltype(_impl_.is_brute_search_){0}
    , decltype(_impl_.multi_vector_rank_){0}
    , decltype(_impl_.l2_sqrt_){false}
    , decltype(_impl_.is_vector_value_){false}
    , decltype(_impl_.trace_){false}
    , decltype(_impl_.operator__){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ranker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ranker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:vearchpb.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vec_fields_.~RepeatedPtrField();
  _impl_.fields_.~RepeatedPtrField();
  _impl_.range_filters_.~RepeatedPtrField();
  _impl_.term_filters_.~RepeatedPtrField();
  _impl_.sort_field_map_.Destruct();
  _impl_.sort_field_map_.~MapField();
  _impl_.sort_fields_.~RepeatedPtrField();
  _impl_.index_params_.Destroy();
  _impl_.ranker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void SearchRequest::ArenaDtor(void* object) {
  SearchRequest* _this = reinterpret_cast< SearchRequest* >(object);
  _this->_impl_.sort_field_map_.Destruct();
}
void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SearchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vec_fields_.Clear();
  _impl_.fields_.Clear();
  _impl_.range_filters_.Clear();
  _impl_.term_filters_.Clear();
  _impl_.sort_field_map_.Clear();
  _impl_.sort_fields_.Clear();
  _impl_.index_params_.ClearToEmpty();
  _impl_.ranker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  ::memset(&_impl_.req_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.operator__) -
      reinterpret_cast<char*>(&_impl_.req_num_)) + sizeof(_impl_.operator__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.RequestHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.req_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topN = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.topn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 is_brute_search = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_brute_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.VectorQuery vec_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vec_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fields = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SearchRequest.fields"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.RangeFilter range_filters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.TermFilter term_filters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_term_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string index_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_index_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SearchRequest.index_params"));
        } else
          goto handle_unusual;
        continue;
      // int32 multi_vector_rank = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.multi_vector_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool l2_sqrt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.l2_sqrt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_vector_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_vector_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sort_field_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sort_field_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.SortField sort_fields = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sort_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ranker = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_ranker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SearchRequest.ranker"));
        } else
          goto handle_unusual;
        continue;
      // bool trace = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.trace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 operator = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.operator__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SearchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int32 req_num = 2;
  if (this->_internal_req_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_num(), target);
  }

  // int32 topN = 3;
  if (this->_internal_topn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_topn(), target);
  }

  // int32 is_brute_search = 4;
  if (this->_internal_is_brute_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_is_brute_search(), target);
  }

  // repeated .vearchpb.VectorQuery vec_fields = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vec_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_vec_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string fields = 6;
  for (int i = 0, n = this->_internal_fields_size(); i < n; i++) {
    const auto& s = this->_internal_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SearchRequest.fields");
    target = stream->WriteString(6, s, target);
  }

  // repeated .vearchpb.RangeFilter range_filters = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.TermFilter term_filters = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_term_filters_size()); i < n; i++) {
    const auto& repfield = this->_internal_term_filters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string index_params = 9;
  if (!this->_internal_index_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_params().data(), static_cast<int>(this->_internal_index_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SearchRequest.index_params");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_index_params(), target);
  }

  // int32 multi_vector_rank = 10;
  if (this->_internal_multi_vector_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_multi_vector_rank(), target);
  }

  // bool l2_sqrt = 11;
  if (this->_internal_l2_sqrt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_l2_sqrt(), target);
  }

  // bool is_vector_value = 12;
  if (this->_internal_is_vector_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_vector_value(), target);
  }

  // map<string, string> sort_field_map = 13;
  if (!this->_internal_sort_field_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SearchRequest_SortFieldMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sort_field_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.SearchRequest.SortFieldMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "vearchpb.SearchRequest.SortFieldMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .vearchpb.SortField sort_fields = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sort_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_sort_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ranker = 15;
  if (!this->_internal_ranker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ranker().data(), static_cast<int>(this->_internal_ranker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SearchRequest.ranker");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_ranker(), target);
  }

  // bool trace = 16;
  if (this->_internal_trace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_trace(), target);
  }

  // int32 operator = 17;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SearchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.VectorQuery vec_fields = 5;
  total_size += 1UL * this->_internal_vec_fields_size();
  for (const auto& msg : this->_impl_.vec_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string fields = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fields_.size());
  for (int i = 0, n = _impl_.fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fields_.Get(i));
  }

  // repeated .vearchpb.RangeFilter range_filters = 7;
  total_size += 1UL * this->_internal_range_filters_size();
  for (const auto& msg : this->_impl_.range_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vearchpb.TermFilter term_filters = 8;
  total_size += 1UL * this->_internal_term_filters_size();
  for (const auto& msg : this->_impl_.term_filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> sort_field_map = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sort_field_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sort_field_map().begin();
      it != this->_internal_sort_field_map().end(); ++it) {
    total_size += SearchRequest_SortFieldMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .vearchpb.SortField sort_fields = 14;
  total_size += 1UL * this->_internal_sort_fields_size();
  for (const auto& msg : this->_impl_.sort_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_params = 9;
  if (!this->_internal_index_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_params());
  }

  // string ranker = 15;
  if (!this->_internal_ranker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ranker());
  }

  // .vearchpb.RequestHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // int32 req_num = 2;
  if (this->_internal_req_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_req_num());
  }

  // int32 topN = 3;
  if (this->_internal_topn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_topn());
  }

  // int32 is_brute_search = 4;
  if (this->_internal_is_brute_search() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_brute_search());
  }

  // int32 multi_vector_rank = 10;
  if (this->_internal_multi_vector_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_multi_vector_rank());
  }

  // bool l2_sqrt = 11;
  if (this->_internal_l2_sqrt() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vector_value = 12;
  if (this->_internal_is_vector_value() != 0) {
    total_size += 1 + 1;
  }

  // bool trace = 16;
  if (this->_internal_trace() != 0) {
    total_size += 2 + 1;
  }

  // int32 operator = 17;
  if (this->_internal_operator_() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SearchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vec_fields_.MergeFrom(from._impl_.vec_fields_);
  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_impl_.range_filters_.MergeFrom(from._impl_.range_filters_);
  _this->_impl_.term_filters_.MergeFrom(from._impl_.term_filters_);
  _this->_impl_.sort_field_map_.MergeFrom(from._impl_.sort_field_map_);
  _this->_impl_.sort_fields_.MergeFrom(from._impl_.sort_fields_);
  if (!from._internal_index_params().empty()) {
    _this->_internal_set_index_params(from._internal_index_params());
  }
  if (!from._internal_ranker().empty()) {
    _this->_internal_set_ranker(from._internal_ranker());
  }
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::RequestHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_req_num() != 0) {
    _this->_internal_set_req_num(from._internal_req_num());
  }
  if (from._internal_topn() != 0) {
    _this->_internal_set_topn(from._internal_topn());
  }
  if (from._internal_is_brute_search() != 0) {
    _this->_internal_set_is_brute_search(from._internal_is_brute_search());
  }
  if (from._internal_multi_vector_rank() != 0) {
    _this->_internal_set_multi_vector_rank(from._internal_multi_vector_rank());
  }
  if (from._internal_l2_sqrt() != 0) {
    _this->_internal_set_l2_sqrt(from._internal_l2_sqrt());
  }
  if (from._internal_is_vector_value() != 0) {
    _this->_internal_set_is_vector_value(from._internal_is_vector_value());
  }
  if (from._internal_trace() != 0) {
    _this->_internal_set_trace(from._internal_trace());
  }
  if (from._internal_operator_() != 0) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vec_fields_.InternalSwap(&other->_impl_.vec_fields_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  _impl_.range_filters_.InternalSwap(&other->_impl_.range_filters_);
  _impl_.term_filters_.InternalSwap(&other->_impl_.term_filters_);
  _impl_.sort_field_map_.InternalSwap(&other->_impl_.sort_field_map_);
  _impl_.sort_fields_.InternalSwap(&other->_impl_.sort_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_params_, lhs_arena,
      &other->_impl_.index_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ranker_, lhs_arena,
      &other->_impl_.ranker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.operator__)
      + sizeof(SearchRequest::_impl_.operator__)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[25]);
}

// ===================================================================

class ResultItem::_Internal {
 public:
};

void ResultItem::clear_fields() {
  _impl_.fields_.Clear();
}
ResultItem::ResultItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.ResultItem)
}
ResultItem::ResultItem(const ResultItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResultItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){from._impl_.fields_}
    , decltype(_impl_.p_key_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.p_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p_key().empty()) {
    _this->_impl_.p_key_.Set(from._internal_p_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.score_ = from._impl_.score_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.ResultItem)
}

inline void ResultItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_){arena}
    , decltype(_impl_.p_key_){}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.p_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResultItem::~ResultItem() {
  // @@protoc_insertion_point(destructor:vearchpb.ResultItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.~RepeatedPtrField();
  _impl_.p_key_.Destroy();
}

void ResultItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.ResultItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _impl_.p_key_.ClearToEmpty();
  _impl_.score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Field fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string p_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_p_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.ResultItem.p_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.ResultItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double score = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_score(), target);
  }

  // repeated .vearchpb.Field fields = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string p_key = 3;
  if (!this->_internal_p_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_p_key().data(), static_cast<int>(this->_internal_p_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.ResultItem.p_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_p_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.ResultItem)
  return target;
}

size_t ResultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.ResultItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Field fields = 2;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->_impl_.fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string p_key = 3;
  if (!this->_internal_p_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_p_key());
  }

  // double score = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultItem::GetClassData() const { return &_class_data_; }


void ResultItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultItem*>(&to_msg);
  auto& from = static_cast<const ResultItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.ResultItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  if (!from._internal_p_key().empty()) {
    _this->_internal_set_p_key(from._internal_p_key());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultItem::CopyFrom(const ResultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.ResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultItem::IsInitialized() const {
  return true;
}

void ResultItem::InternalSwap(ResultItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.p_key_, lhs_arena,
      &other->_impl_.p_key_, rhs_arena
  );
  swap(_impl_.score_, other->_impl_.score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[26]);
}

// ===================================================================

class SearchResult::_Internal {
 public:
  static const ::vearchpb::SearchStatus& status(const SearchResult* msg);
};

const ::vearchpb::SearchStatus&
SearchResult::_Internal::status(const SearchResult* msg) {
  return *msg->_impl_.status_;
}
SearchResult::SearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.SearchResult)
}
SearchResult::SearchResult(const SearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_items_){from._impl_.result_items_}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.max_score_){}
    , decltype(_impl_.total_hits_){}
    , decltype(_impl_.max_took_id_){}
    , decltype(_impl_.max_took_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.timeout_){}
    , decltype(_impl_.topn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::vearchpb::SearchStatus(*from._impl_.status_);
  }
  ::memcpy(&_impl_.max_score_, &from._impl_.max_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.topn_) -
    reinterpret_cast<char*>(&_impl_.max_score_)) + sizeof(_impl_.topn_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.SearchResult)
}

inline void SearchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_items_){arena}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.max_score_){0}
    , decltype(_impl_.total_hits_){0}
    , decltype(_impl_.max_took_id_){0u}
    , decltype(_impl_.max_took_){int64_t{0}}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.timeout_){false}
    , decltype(_impl_.topn_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:vearchpb.SearchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_items_.~RepeatedPtrField();
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SearchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SearchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_items_.Clear();
  _impl_.msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  ::memset(&_impl_.max_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.topn_) -
      reinterpret_cast<char*>(&_impl_.max_score_)) + sizeof(_impl_.topn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_hits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 max_took = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_took_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_took_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_took_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SearchResult.msg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.ResultItem result_items = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 pID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topN = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.topn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SearchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_hits = 1;
  if (this->_internal_total_hits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_hits(), target);
  }

  // double max_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = this->_internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_score(), target);
  }

  // int64 max_took = 3;
  if (this->_internal_max_took() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_took(), target);
  }

  // uint32 max_took_id = 4;
  if (this->_internal_max_took_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_took_id(), target);
  }

  // .vearchpb.SearchStatus status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SearchResult.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  // repeated .vearchpb.ResultItem result_items = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_result_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 pID = 8;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pid(), target);
  }

  // bool timeout = 9;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_timeout(), target);
  }

  // int32 topN = 10;
  if (this->_internal_topn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_topn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SearchResult)
  return target;
}

size_t SearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SearchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.ResultItem result_items = 7;
  total_size += 1UL * this->_internal_result_items_size();
  for (const auto& msg : this->_impl_.result_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .vearchpb.SearchStatus status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // double max_score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = this->_internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    total_size += 1 + 8;
  }

  // int32 total_hits = 1;
  if (this->_internal_total_hits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_hits());
  }

  // uint32 max_took_id = 4;
  if (this->_internal_max_took_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_took_id());
  }

  // int64 max_took = 3;
  if (this->_internal_max_took() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_took());
  }

  // uint32 pID = 8;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
  }

  // bool timeout = 9;
  if (this->_internal_timeout() != 0) {
    total_size += 1 + 1;
  }

  // int32 topN = 10;
  if (this->_internal_topn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_topn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResult::GetClassData() const { return &_class_data_; }


void SearchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResult*>(&to_msg);
  auto& from = static_cast<const SearchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SearchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_items_.MergeFrom(from._impl_.result_items_);
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::vearchpb::SearchStatus::MergeFrom(
        from._internal_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_score = from._internal_max_score();
  uint64_t raw_max_score;
  memcpy(&raw_max_score, &tmp_max_score, sizeof(tmp_max_score));
  if (raw_max_score != 0) {
    _this->_internal_set_max_score(from._internal_max_score());
  }
  if (from._internal_total_hits() != 0) {
    _this->_internal_set_total_hits(from._internal_total_hits());
  }
  if (from._internal_max_took_id() != 0) {
    _this->_internal_set_max_took_id(from._internal_max_took_id());
  }
  if (from._internal_max_took() != 0) {
    _this->_internal_set_max_took(from._internal_max_took());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_topn() != 0) {
    _this->_internal_set_topn(from._internal_topn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  return true;
}

void SearchResult::InternalSwap(SearchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_items_.InternalSwap(&other->_impl_.result_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResult, _impl_.topn_)
      + sizeof(SearchResult::_impl_.topn_)
      - PROTOBUF_FIELD_OFFSET(SearchResult, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[27]);
}

// ===================================================================

class SearchResponse::_Internal {
 public:
  static const ::vearchpb::ResponseHead& head(const SearchResponse* msg);
};

const ::vearchpb::ResponseHead&
SearchResponse::_Internal::head(const SearchResponse* msg) {
  return *msg->_impl_.head_;
}
SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.flatbytes_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flatbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flatbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flatbytes().empty()) {
    _this->_impl_.flatbytes_.Set(from._internal_flatbytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::vearchpb::ResponseHead(*from._impl_.head_);
  }
  _this->_impl_.timeout_ = from._impl_.timeout_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.SearchResponse)
}

inline void SearchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.flatbytes_){}
    , decltype(_impl_.head_){nullptr}
    , decltype(_impl_.timeout_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flatbytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flatbytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:vearchpb.SearchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.flatbytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void SearchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SearchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.flatbytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.head_ != nullptr) {
    delete _impl_.head_;
  }
  _impl_.head_ = nullptr;
  _impl_.timeout_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.ResponseHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.SearchResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes FlatBytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_flatbytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SearchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .vearchpb.SearchResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool timeout = 3;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_timeout(), target);
  }

  // bytes FlatBytes = 4;
  if (!this->_internal_flatbytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_flatbytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SearchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.SearchResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes FlatBytes = 4;
  if (!this->_internal_flatbytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flatbytes());
  }

  // .vearchpb.ResponseHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }

  // bool timeout = 3;
  if (this->_internal_timeout() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchResponse::GetClassData() const { return &_class_data_; }


void SearchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchResponse*>(&to_msg);
  auto& from = static_cast<const SearchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SearchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_flatbytes().empty()) {
    _this->_internal_set_flatbytes(from._internal_flatbytes());
  }
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::vearchpb::ResponseHead::MergeFrom(
        from._internal_head());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flatbytes_, lhs_arena,
      &other->_impl_.flatbytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResponse, _impl_.timeout_)
      + sizeof(SearchResponse::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(SearchResponse, _impl_.head_)>(
          reinterpret_cast<char*>(&_impl_.head_),
          reinterpret_cast<char*>(&other->_impl_.head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[28]);
}

// ===================================================================

class SearchStatus::_Internal {
 public:
};

SearchStatus::SearchStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.SearchStatus)
}
SearchStatus::SearchStatus(const SearchStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.total_){}
    , decltype(_impl_.failed_){}
    , decltype(_impl_.successful_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_, &from._impl_.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.successful_) -
    reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.successful_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.SearchStatus)
}

inline void SearchStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.total_){0}
    , decltype(_impl_.failed_){0}
    , decltype(_impl_.successful_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchStatus::~SearchStatus() {
  // @@protoc_insertion_point(destructor:vearchpb.SearchStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void SearchStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SearchStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.successful_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.successful_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 successful = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.SearchStatus.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SearchStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total(), target);
  }

  // int32 failed = 2;
  if (this->_internal_failed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_failed(), target);
  }

  // int32 successful = 3;
  if (this->_internal_successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_successful(), target);
  }

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.SearchStatus.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SearchStatus)
  return target;
}

size_t SearchStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SearchStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 4;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total());
  }

  // int32 failed = 2;
  if (this->_internal_failed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed());
  }

  // int32 successful = 3;
  if (this->_internal_successful() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_successful());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchStatus::GetClassData() const { return &_class_data_; }


void SearchStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchStatus*>(&to_msg);
  auto& from = static_cast<const SearchStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SearchStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_failed() != 0) {
    _this->_internal_set_failed(from._internal_failed());
  }
  if (from._internal_successful() != 0) {
    _this->_internal_set_successful(from._internal_successful());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchStatus::CopyFrom(const SearchStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SearchStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchStatus::IsInitialized() const {
  return true;
}

void SearchStatus::InternalSwap(SearchStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchStatus, _impl_.successful_)
      + sizeof(SearchStatus::_impl_.successful_)
      - PROTOBUF_FIELD_OFFSET(SearchStatus, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_router_5fgrpc_2eproto_getter, &descriptor_table_router_5fgrpc_2eproto_once,
      file_level_metadata_router_5fgrpc_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vearchpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vearchpb::RequestHead_ParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::vearchpb::RequestHead_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::RequestHead_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::RequestHead*
Arena::CreateMaybeMessage< ::vearchpb::RequestHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::RequestHead >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::ResponseHead_ParamsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::vearchpb::ResponseHead_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::ResponseHead_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::ResponseHead*
Arena::CreateMaybeMessage< ::vearchpb::ResponseHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::ResponseHead >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::GetRequest*
Arena::CreateMaybeMessage< ::vearchpb::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::DeleteRequest*
Arena::CreateMaybeMessage< ::vearchpb::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::BulkRequest*
Arena::CreateMaybeMessage< ::vearchpb::BulkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::BulkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::ForceMergeRequest*
Arena::CreateMaybeMessage< ::vearchpb::ForceMergeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::ForceMergeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::FlushRequest*
Arena::CreateMaybeMessage< ::vearchpb::FlushRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::FlushRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::IndexRequest*
Arena::CreateMaybeMessage< ::vearchpb::IndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::IndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::GetResponse*
Arena::CreateMaybeMessage< ::vearchpb::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::DeleteResponse*
Arena::CreateMaybeMessage< ::vearchpb::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::BulkResponse*
Arena::CreateMaybeMessage< ::vearchpb::BulkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::BulkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::ForceMergeResponse*
Arena::CreateMaybeMessage< ::vearchpb::ForceMergeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::ForceMergeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::DelByQueryeResponse*
Arena::CreateMaybeMessage< ::vearchpb::DelByQueryeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::DelByQueryeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::FlushResponse*
Arena::CreateMaybeMessage< ::vearchpb::FlushResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::FlushResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::IndexResponse*
Arena::CreateMaybeMessage< ::vearchpb::IndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::IndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::TermFilter*
Arena::CreateMaybeMessage< ::vearchpb::TermFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::TermFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::RangeFilter*
Arena::CreateMaybeMessage< ::vearchpb::RangeFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::RangeFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SortField*
Arena::CreateMaybeMessage< ::vearchpb::SortField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SortField >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::VectorQuery*
Arena::CreateMaybeMessage< ::vearchpb::VectorQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::VectorQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::IndexParameters*
Arena::CreateMaybeMessage< ::vearchpb::IndexParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::IndexParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::QueryRequest_SortFieldMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::QueryRequest*
Arena::CreateMaybeMessage< ::vearchpb::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SearchRequest_SortFieldMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SearchRequest*
Arena::CreateMaybeMessage< ::vearchpb::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::ResultItem*
Arena::CreateMaybeMessage< ::vearchpb::ResultItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::ResultItem >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SearchResult*
Arena::CreateMaybeMessage< ::vearchpb::SearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SearchResponse*
Arena::CreateMaybeMessage< ::vearchpb::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SearchStatus*
Arena::CreateMaybeMessage< ::vearchpb::SearchStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SearchStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

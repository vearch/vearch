syntax = "proto3";

import "data_model.proto";
import "errors.proto";

option optimize_for = SPEED;
option go_package = "./vearchpb";
package vearchpb;

service RouterGRPCService {
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc Search(SearchRequest) returns (SearchResponse) {}
  rpc Bulk(BulkRequest) returns (BulkResponse) {}
  rpc Space(RequestHead) returns (Table) {}
  rpc SearchByID(SearchRequest) returns (SearchResponse) {}
}

message RequestHead {
  int64 time_out_ms = 1;
  string user_name = 2;
  string password = 3;
  string db_name = 4;
  string space_name = 5;
  string client_type = 6;
  // from, sort, request_id, partition_id
  map<string, string> params = 7;
}

message ResponseHead {
  string request_id = 1;
  Error err = 2;
  map<string, string> params = 3;
}

//*********************** doc query *********************** //

message GetRequest {
  RequestHead head = 1;
  repeated string primary_keys = 2;
}

message DeleteRequest {
  RequestHead head = 1;
  repeated string primary_keys = 2;
}

message BulkRequest {
  RequestHead head = 1;
  repeated Document docs = 2;
  repeated uint32 partitions = 3;
}

message ForceMergeRequest { RequestHead head = 1; }

message FlushRequest { RequestHead head = 1; }

message IndexRequest {
  RequestHead head = 1;
  int64 drop_before_rebuild = 2;
  int64 limit_cpu = 3;
  int64 describe = 4;
  uint32 partition_id = 5;
}

//*********************** doc result *********************** //

message GetResponse {
  ResponseHead head = 1;
  repeated Item items = 2;
}

message DeleteResponse {
  ResponseHead head = 1;
  repeated Item items = 2;
}

message BulkResponse {
  ResponseHead head = 1;
  repeated Item items = 2;
}

message ForceMergeResponse {
  ResponseHead head = 1;
  SearchStatus shards = 2;
}

message DelByQueryeResponse {
  ResponseHead head = 1;
  int32 DelNum = 2;
  repeated string ids_str = 3;
}

message FlushResponse {
  ResponseHead head = 1;
  SearchStatus shards = 2;
}

message IndexResponse {
  ResponseHead head = 1;
  SearchStatus shards = 2;
}

//*********************** Search query *********************** //

message TermFilter {
  string field = 1;
  bytes value = 2;
  int32 is_union = 3;
}

message RangeFilter {
  string field = 1;
  bytes lower_value = 2;
  bytes upper_value = 3;
  bool include_lower = 4;
  bool include_upper = 5;
  int32 is_union = 6;
}

message SortField {
  string field = 1;
  bool type = 2;
}

message VectorQuery {
  string name = 1;
  bytes value = 2;
  double min_score = 3;
  double max_score = 4;
  string format = 5;
  string index_type = 6;
}

message IndexParameters {
  enum DistanceMetricType {
    InnerProduct = 0;
    L2 = 1;
  }
  DistanceMetricType metric_type = 1;
  int32 nprobe = 2;
}

message QueryRequest {
  RequestHead head = 1;
  repeated string document_ids = 2;
  int32 partition_id = 3;
  bool next = 4;
  repeated RangeFilter range_filters = 5;
  repeated TermFilter term_filters = 6;
  repeated string fields = 7;
  bool is_vector_value = 8;
  int32 limit = 9;
  int32 page_size = 10;
  string load_balance = 11;
  map<string, string> sort_field_map = 12;
  repeated SortField sort_fields = 13;
  bool trace = 14;
  int32 operator = 15;
}

message SearchRequest {
  RequestHead head = 1;
  int32 req_num = 2;
  int32 topN = 3;
  int32 is_brute_search = 4;
  repeated VectorQuery vec_fields = 5;
  repeated string fields = 6;
  repeated RangeFilter range_filters = 7;
  repeated TermFilter term_filters = 8;
  string index_params = 9;
  int32 multi_vector_rank = 10;
  bool l2_sqrt = 11;
  bool is_vector_value = 12;
  map<string, string> sort_field_map = 13;
  repeated SortField sort_fields = 14;
  string ranker = 15;
  bool trace = 16;
  int32 operator = 17;
}

//*********************** Search response *********************** //

message ResultItem {
  double score = 1;
  repeated Field fields = 2;
  string p_key = 3;
}

message SearchResult {
  int32 total_hits = 1;
  double max_score = 2;
  int64 max_took = 3;
  uint32 max_took_id = 4;
  SearchStatus status = 5;
  string msg = 6;
  repeated ResultItem result_items = 7;
  uint32 pID = 8;
  bool timeout = 9;
  int32 topN = 10;
}

message SearchResponse {
  ResponseHead head = 1;
  repeated SearchResult results = 2;
  bool timeout = 3;
  bytes FlatBytes = 4;
}

message SearchStatus {
  int32 total = 1;
  int32 failed = 2;
  int32 successful = 3;
  string msg = 4;
}

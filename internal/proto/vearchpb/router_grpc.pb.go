// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.0
// source: router_grpc.proto

package vearchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexParameters_DistanceMetricType int32

const (
	IndexParameters_InnerProduct IndexParameters_DistanceMetricType = 0
	IndexParameters_L2           IndexParameters_DistanceMetricType = 1
)

// Enum value maps for IndexParameters_DistanceMetricType.
var (
	IndexParameters_DistanceMetricType_name = map[int32]string{
		0: "InnerProduct",
		1: "L2",
	}
	IndexParameters_DistanceMetricType_value = map[string]int32{
		"InnerProduct": 0,
		"L2":           1,
	}
)

func (x IndexParameters_DistanceMetricType) Enum() *IndexParameters_DistanceMetricType {
	p := new(IndexParameters_DistanceMetricType)
	*p = x
	return p
}

func (x IndexParameters_DistanceMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexParameters_DistanceMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_grpc_proto_enumTypes[0].Descriptor()
}

func (IndexParameters_DistanceMetricType) Type() protoreflect.EnumType {
	return &file_router_grpc_proto_enumTypes[0]
}

func (x IndexParameters_DistanceMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexParameters_DistanceMetricType.Descriptor instead.
func (IndexParameters_DistanceMetricType) EnumDescriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{19, 0}
}

type RequestHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOutMs  int64  `protobuf:"varint,1,opt,name=time_out_ms,json=timeOutMs,proto3" json:"time_out_ms,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	DbName     string `protobuf:"bytes,4,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	SpaceName  string `protobuf:"bytes,5,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	ClientType string `protobuf:"bytes,6,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty"`
	// from, sort, request_id, partition_id
	Params map[string]string `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RequestHead) Reset() {
	*x = RequestHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHead) ProtoMessage() {}

func (x *RequestHead) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHead.ProtoReflect.Descriptor instead.
func (*RequestHead) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *RequestHead) GetTimeOutMs() int64 {
	if x != nil {
		return x.TimeOutMs
	}
	return 0
}

func (x *RequestHead) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RequestHead) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RequestHead) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *RequestHead) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *RequestHead) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *RequestHead) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type ResponseHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string            `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Err       *Error            `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Params    map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResponseHead) Reset() {
	*x = ResponseHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHead) ProtoMessage() {}

func (x *ResponseHead) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHead.ProtoReflect.Descriptor instead.
func (*ResponseHead) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseHead) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResponseHead) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *ResponseHead) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head        *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	PrimaryKeys []string     `protobuf:"bytes,2,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *GetRequest) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head        *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	PrimaryKeys []string     `protobuf:"bytes,2,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *DeleteRequest) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

type BulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head       *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Docs       []*Document  `protobuf:"bytes,2,rep,name=docs,proto3" json:"docs,omitempty"`
	Partitions []uint32     `protobuf:"varint,3,rep,packed,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *BulkRequest) Reset() {
	*x = BulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRequest) ProtoMessage() {}

func (x *BulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRequest.ProtoReflect.Descriptor instead.
func (*BulkRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *BulkRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *BulkRequest) GetDocs() []*Document {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *BulkRequest) GetPartitions() []uint32 {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type ForceMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *ForceMergeRequest) Reset() {
	*x = ForceMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeRequest) ProtoMessage() {}

func (x *ForceMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeRequest.ProtoReflect.Descriptor instead.
func (*ForceMergeRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *ForceMergeRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type FlushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
}

func (x *FlushRequest) Reset() {
	*x = FlushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushRequest) ProtoMessage() {}

func (x *FlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushRequest.ProtoReflect.Descriptor instead.
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *FlushRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

type IndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head              *RequestHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	DropBeforeRebuild int64        `protobuf:"varint,2,opt,name=drop_before_rebuild,json=dropBeforeRebuild,proto3" json:"drop_before_rebuild,omitempty"`
	LimitCpu          int64        `protobuf:"varint,3,opt,name=limit_cpu,json=limitCpu,proto3" json:"limit_cpu,omitempty"`
	Describe          int64        `protobuf:"varint,4,opt,name=describe,proto3" json:"describe,omitempty"`
	PartitionId       uint32       `protobuf:"varint,5,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *IndexRequest) Reset() {
	*x = IndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRequest) ProtoMessage() {}

func (x *IndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRequest.ProtoReflect.Descriptor instead.
func (*IndexRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *IndexRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *IndexRequest) GetDropBeforeRebuild() int64 {
	if x != nil {
		return x.DropBeforeRebuild
	}
	return 0
}

func (x *IndexRequest) GetLimitCpu() int64 {
	if x != nil {
		return x.LimitCpu
	}
	return 0
}

func (x *IndexRequest) GetDescribe() int64 {
	if x != nil {
		return x.Describe
	}
	return 0
}

func (x *IndexRequest) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head  *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *GetResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head  *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *DeleteResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type BulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head  *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Items []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BulkResponse) Reset() {
	*x = BulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkResponse) ProtoMessage() {}

func (x *BulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkResponse.ProtoReflect.Descriptor instead.
func (*BulkResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{10}
}

func (x *BulkResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *BulkResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type ForceMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Shards *SearchStatus `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ForceMergeResponse) Reset() {
	*x = ForceMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeResponse) ProtoMessage() {}

func (x *ForceMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeResponse.ProtoReflect.Descriptor instead.
func (*ForceMergeResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{11}
}

func (x *ForceMergeResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *ForceMergeResponse) GetShards() *SearchStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

type DelByQueryeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	DelNum int32         `protobuf:"varint,2,opt,name=DelNum,proto3" json:"DelNum,omitempty"`
	IdsStr []string      `protobuf:"bytes,3,rep,name=ids_str,json=idsStr,proto3" json:"ids_str,omitempty"`
}

func (x *DelByQueryeResponse) Reset() {
	*x = DelByQueryeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelByQueryeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelByQueryeResponse) ProtoMessage() {}

func (x *DelByQueryeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelByQueryeResponse.ProtoReflect.Descriptor instead.
func (*DelByQueryeResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{12}
}

func (x *DelByQueryeResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *DelByQueryeResponse) GetDelNum() int32 {
	if x != nil {
		return x.DelNum
	}
	return 0
}

func (x *DelByQueryeResponse) GetIdsStr() []string {
	if x != nil {
		return x.IdsStr
	}
	return nil
}

type FlushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Shards *SearchStatus `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
}

func (x *FlushResponse) Reset() {
	*x = FlushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushResponse) ProtoMessage() {}

func (x *FlushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushResponse.ProtoReflect.Descriptor instead.
func (*FlushResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{13}
}

func (x *FlushResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *FlushResponse) GetShards() *SearchStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

type IndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head   *ResponseHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Shards *SearchStatus `protobuf:"bytes,2,opt,name=shards,proto3" json:"shards,omitempty"`
}

func (x *IndexResponse) Reset() {
	*x = IndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexResponse) ProtoMessage() {}

func (x *IndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexResponse.ProtoReflect.Descriptor instead.
func (*IndexResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{14}
}

func (x *IndexResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *IndexResponse) GetShards() *SearchStatus {
	if x != nil {
		return x.Shards
	}
	return nil
}

type TermFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field   string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsUnion int32  `protobuf:"varint,3,opt,name=is_union,json=isUnion,proto3" json:"is_union,omitempty"`
}

func (x *TermFilter) Reset() {
	*x = TermFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermFilter) ProtoMessage() {}

func (x *TermFilter) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermFilter.ProtoReflect.Descriptor instead.
func (*TermFilter) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{15}
}

func (x *TermFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermFilter) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TermFilter) GetIsUnion() int32 {
	if x != nil {
		return x.IsUnion
	}
	return 0
}

type RangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	LowerValue   []byte `protobuf:"bytes,2,opt,name=lower_value,json=lowerValue,proto3" json:"lower_value,omitempty"`
	UpperValue   []byte `protobuf:"bytes,3,opt,name=upper_value,json=upperValue,proto3" json:"upper_value,omitempty"`
	IncludeLower bool   `protobuf:"varint,4,opt,name=include_lower,json=includeLower,proto3" json:"include_lower,omitempty"`
	IncludeUpper bool   `protobuf:"varint,5,opt,name=include_upper,json=includeUpper,proto3" json:"include_upper,omitempty"`
	IsUnion      int32  `protobuf:"varint,6,opt,name=is_union,json=isUnion,proto3" json:"is_union,omitempty"`
}

func (x *RangeFilter) Reset() {
	*x = RangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeFilter) ProtoMessage() {}

func (x *RangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeFilter.ProtoReflect.Descriptor instead.
func (*RangeFilter) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{16}
}

func (x *RangeFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RangeFilter) GetLowerValue() []byte {
	if x != nil {
		return x.LowerValue
	}
	return nil
}

func (x *RangeFilter) GetUpperValue() []byte {
	if x != nil {
		return x.UpperValue
	}
	return nil
}

func (x *RangeFilter) GetIncludeLower() bool {
	if x != nil {
		return x.IncludeLower
	}
	return false
}

func (x *RangeFilter) GetIncludeUpper() bool {
	if x != nil {
		return x.IncludeUpper
	}
	return false
}

func (x *RangeFilter) GetIsUnion() int32 {
	if x != nil {
		return x.IsUnion
	}
	return 0
}

type SortField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Type  bool   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SortField) Reset() {
	*x = SortField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortField) ProtoMessage() {}

func (x *SortField) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortField.ProtoReflect.Descriptor instead.
func (*SortField) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{17}
}

func (x *SortField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortField) GetType() bool {
	if x != nil {
		return x.Type
	}
	return false
}

type VectorQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value     []byte  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	MinScore  float64 `protobuf:"fixed64,3,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	MaxScore  float64 `protobuf:"fixed64,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Format    string  `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	IndexType string  `protobuf:"bytes,6,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
}

func (x *VectorQuery) Reset() {
	*x = VectorQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQuery) ProtoMessage() {}

func (x *VectorQuery) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQuery.ProtoReflect.Descriptor instead.
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{18}
}

func (x *VectorQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorQuery) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VectorQuery) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *VectorQuery) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *VectorQuery) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VectorQuery) GetIndexType() string {
	if x != nil {
		return x.IndexType
	}
	return ""
}

type IndexParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricType IndexParameters_DistanceMetricType `protobuf:"varint,1,opt,name=metric_type,json=metricType,proto3,enum=vearchpb.IndexParameters_DistanceMetricType" json:"metric_type,omitempty"`
	Nprobe     int32                              `protobuf:"varint,2,opt,name=nprobe,proto3" json:"nprobe,omitempty"`
}

func (x *IndexParameters) Reset() {
	*x = IndexParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexParameters) ProtoMessage() {}

func (x *IndexParameters) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexParameters.ProtoReflect.Descriptor instead.
func (*IndexParameters) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{19}
}

func (x *IndexParameters) GetMetricType() IndexParameters_DistanceMetricType {
	if x != nil {
		return x.MetricType
	}
	return IndexParameters_InnerProduct
}

func (x *IndexParameters) GetNprobe() int32 {
	if x != nil {
		return x.Nprobe
	}
	return 0
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head          *RequestHead      `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	DocumentIds   []string          `protobuf:"bytes,2,rep,name=document_ids,json=documentIds,proto3" json:"document_ids,omitempty"`
	PartitionId   int32             `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Next          bool              `protobuf:"varint,4,opt,name=next,proto3" json:"next,omitempty"`
	RangeFilters  []*RangeFilter    `protobuf:"bytes,5,rep,name=range_filters,json=rangeFilters,proto3" json:"range_filters,omitempty"`
	TermFilters   []*TermFilter     `protobuf:"bytes,6,rep,name=term_filters,json=termFilters,proto3" json:"term_filters,omitempty"`
	Fields        []string          `protobuf:"bytes,7,rep,name=fields,proto3" json:"fields,omitempty"`
	IsVectorValue bool              `protobuf:"varint,8,opt,name=is_vector_value,json=isVectorValue,proto3" json:"is_vector_value,omitempty"`
	Limit         int32             `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	PageSize      int32             `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	LoadBalance   string            `protobuf:"bytes,11,opt,name=load_balance,json=loadBalance,proto3" json:"load_balance,omitempty"`
	SortFieldMap  map[string]string `protobuf:"bytes,12,rep,name=sort_field_map,json=sortFieldMap,proto3" json:"sort_field_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortFields    []*SortField      `protobuf:"bytes,13,rep,name=sort_fields,json=sortFields,proto3" json:"sort_fields,omitempty"`
	Trace         bool              `protobuf:"varint,14,opt,name=trace,proto3" json:"trace,omitempty"`
	Operator      int32             `protobuf:"varint,15,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{20}
}

func (x *QueryRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *QueryRequest) GetDocumentIds() []string {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

func (x *QueryRequest) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *QueryRequest) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *QueryRequest) GetRangeFilters() []*RangeFilter {
	if x != nil {
		return x.RangeFilters
	}
	return nil
}

func (x *QueryRequest) GetTermFilters() []*TermFilter {
	if x != nil {
		return x.TermFilters
	}
	return nil
}

func (x *QueryRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *QueryRequest) GetIsVectorValue() bool {
	if x != nil {
		return x.IsVectorValue
	}
	return false
}

func (x *QueryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryRequest) GetLoadBalance() string {
	if x != nil {
		return x.LoadBalance
	}
	return ""
}

func (x *QueryRequest) GetSortFieldMap() map[string]string {
	if x != nil {
		return x.SortFieldMap
	}
	return nil
}

func (x *QueryRequest) GetSortFields() []*SortField {
	if x != nil {
		return x.SortFields
	}
	return nil
}

func (x *QueryRequest) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *QueryRequest) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head            *RequestHead      `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	ReqNum          int32             `protobuf:"varint,2,opt,name=req_num,json=reqNum,proto3" json:"req_num,omitempty"`
	TopN            int32             `protobuf:"varint,3,opt,name=topN,proto3" json:"topN,omitempty"`
	IsBruteSearch   int32             `protobuf:"varint,4,opt,name=is_brute_search,json=isBruteSearch,proto3" json:"is_brute_search,omitempty"`
	VecFields       []*VectorQuery    `protobuf:"bytes,5,rep,name=vec_fields,json=vecFields,proto3" json:"vec_fields,omitempty"`
	Fields          []string          `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	RangeFilters    []*RangeFilter    `protobuf:"bytes,7,rep,name=range_filters,json=rangeFilters,proto3" json:"range_filters,omitempty"`
	TermFilters     []*TermFilter     `protobuf:"bytes,8,rep,name=term_filters,json=termFilters,proto3" json:"term_filters,omitempty"`
	IndexParams     string            `protobuf:"bytes,9,opt,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	MultiVectorRank int32             `protobuf:"varint,10,opt,name=multi_vector_rank,json=multiVectorRank,proto3" json:"multi_vector_rank,omitempty"`
	L2Sqrt          bool              `protobuf:"varint,11,opt,name=l2_sqrt,json=l2Sqrt,proto3" json:"l2_sqrt,omitempty"`
	IsVectorValue   bool              `protobuf:"varint,12,opt,name=is_vector_value,json=isVectorValue,proto3" json:"is_vector_value,omitempty"`
	SortFieldMap    map[string]string `protobuf:"bytes,13,rep,name=sort_field_map,json=sortFieldMap,proto3" json:"sort_field_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortFields      []*SortField      `protobuf:"bytes,14,rep,name=sort_fields,json=sortFields,proto3" json:"sort_fields,omitempty"`
	Ranker          string            `protobuf:"bytes,15,opt,name=ranker,proto3" json:"ranker,omitempty"`
	Trace           bool              `protobuf:"varint,16,opt,name=trace,proto3" json:"trace,omitempty"`
	Operator        int32             `protobuf:"varint,17,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{21}
}

func (x *SearchRequest) GetHead() *RequestHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SearchRequest) GetReqNum() int32 {
	if x != nil {
		return x.ReqNum
	}
	return 0
}

func (x *SearchRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *SearchRequest) GetIsBruteSearch() int32 {
	if x != nil {
		return x.IsBruteSearch
	}
	return 0
}

func (x *SearchRequest) GetVecFields() []*VectorQuery {
	if x != nil {
		return x.VecFields
	}
	return nil
}

func (x *SearchRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchRequest) GetRangeFilters() []*RangeFilter {
	if x != nil {
		return x.RangeFilters
	}
	return nil
}

func (x *SearchRequest) GetTermFilters() []*TermFilter {
	if x != nil {
		return x.TermFilters
	}
	return nil
}

func (x *SearchRequest) GetIndexParams() string {
	if x != nil {
		return x.IndexParams
	}
	return ""
}

func (x *SearchRequest) GetMultiVectorRank() int32 {
	if x != nil {
		return x.MultiVectorRank
	}
	return 0
}

func (x *SearchRequest) GetL2Sqrt() bool {
	if x != nil {
		return x.L2Sqrt
	}
	return false
}

func (x *SearchRequest) GetIsVectorValue() bool {
	if x != nil {
		return x.IsVectorValue
	}
	return false
}

func (x *SearchRequest) GetSortFieldMap() map[string]string {
	if x != nil {
		return x.SortFieldMap
	}
	return nil
}

func (x *SearchRequest) GetSortFields() []*SortField {
	if x != nil {
		return x.SortFields
	}
	return nil
}

func (x *SearchRequest) GetRanker() string {
	if x != nil {
		return x.Ranker
	}
	return ""
}

func (x *SearchRequest) GetTrace() bool {
	if x != nil {
		return x.Trace
	}
	return false
}

func (x *SearchRequest) GetOperator() int32 {
	if x != nil {
		return x.Operator
	}
	return 0
}

type ResultItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score  float64  `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	PKey   string   `protobuf:"bytes,3,opt,name=p_key,json=pKey,proto3" json:"p_key,omitempty"`
}

func (x *ResultItem) Reset() {
	*x = ResultItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultItem) ProtoMessage() {}

func (x *ResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultItem.ProtoReflect.Descriptor instead.
func (*ResultItem) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{22}
}

func (x *ResultItem) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultItem) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ResultItem) GetPKey() string {
	if x != nil {
		return x.PKey
	}
	return ""
}

type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalHits   int32         `protobuf:"varint,1,opt,name=total_hits,json=totalHits,proto3" json:"total_hits,omitempty"`
	MaxScore    float64       `protobuf:"fixed64,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MaxTook     int64         `protobuf:"varint,3,opt,name=max_took,json=maxTook,proto3" json:"max_took,omitempty"`
	MaxTookId   uint32        `protobuf:"varint,4,opt,name=max_took_id,json=maxTookId,proto3" json:"max_took_id,omitempty"`
	Status      *SearchStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Msg         string        `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	ResultItems []*ResultItem `protobuf:"bytes,7,rep,name=result_items,json=resultItems,proto3" json:"result_items,omitempty"`
	PID         uint32        `protobuf:"varint,8,opt,name=pID,proto3" json:"pID,omitempty"`
	Timeout     bool          `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TopN        int32         `protobuf:"varint,10,opt,name=topN,proto3" json:"topN,omitempty"`
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{23}
}

func (x *SearchResult) GetTotalHits() int32 {
	if x != nil {
		return x.TotalHits
	}
	return 0
}

func (x *SearchResult) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SearchResult) GetMaxTook() int64 {
	if x != nil {
		return x.MaxTook
	}
	return 0
}

func (x *SearchResult) GetMaxTookId() uint32 {
	if x != nil {
		return x.MaxTookId
	}
	return 0
}

func (x *SearchResult) GetStatus() *SearchStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SearchResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SearchResult) GetResultItems() []*ResultItem {
	if x != nil {
		return x.ResultItems
	}
	return nil
}

func (x *SearchResult) GetPID() uint32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *SearchResult) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *SearchResult) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head      *ResponseHead   `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Results   []*SearchResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Timeout   bool            `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	FlatBytes []byte          `protobuf:"bytes,4,opt,name=FlatBytes,proto3" json:"FlatBytes,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{24}
}

func (x *SearchResponse) GetHead() *ResponseHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *SearchResponse) GetResults() []*SearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *SearchResponse) GetFlatBytes() []byte {
	if x != nil {
		return x.FlatBytes
	}
	return nil
}

type SearchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Failed     int32  `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	Successful int32  `protobuf:"varint,3,opt,name=successful,proto3" json:"successful,omitempty"`
	Msg        string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SearchStatus) Reset() {
	*x = SearchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_grpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStatus) ProtoMessage() {}

func (x *SearchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_router_grpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStatus.ProtoReflect.Descriptor instead.
func (*SearchStatus) Descriptor() ([]byte, []int) {
	return file_router_grpc_proto_rawDescGZIP(), []int{25}
}

func (x *SearchStatus) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchStatus) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *SearchStatus) GetSuccessful() int32 {
	if x != nil {
		return x.Successful
	}
	return 0
}

func (x *SearchStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_router_grpc_proto protoreflect.FileDescriptor

var file_router_grpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x1a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3e, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x22, 0x39, 0x0a,
	0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x70,
	0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70,
	0x75, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x5f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x60, 0x0a, 0x0c, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x70, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x73, 0x53, 0x74, 0x72, 0x22, 0x6b, 0x0a,
	0x0d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x0d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a,
	0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4c, 0x32, 0x10, 0x01, 0x22, 0x97, 0x05, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x3f, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf4, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x62, 0x72, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x72, 0x75, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x34, 0x0a, 0x0a, 0x76, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x76,
	0x65, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0c,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x32, 0x5f, 0x73, 0x71, 0x72, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x32, 0x53, 0x71, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6f,
	0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x4e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x22, 0xa6, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x46, 0x6c, 0x61, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xf6, 0x02, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x47, 0x52, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x76, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x04, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x70, 0x62, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x15, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x1a, 0x0f, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x76, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e,
	0x48, 0x01, 0x5a, 0x0a, 0x2e, 0x2f, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_router_grpc_proto_rawDescOnce sync.Once
	file_router_grpc_proto_rawDescData = file_router_grpc_proto_rawDesc
)

func file_router_grpc_proto_rawDescGZIP() []byte {
	file_router_grpc_proto_rawDescOnce.Do(func() {
		file_router_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_grpc_proto_rawDescData)
	})
	return file_router_grpc_proto_rawDescData
}

var file_router_grpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_router_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_router_grpc_proto_goTypes = []interface{}{
	(IndexParameters_DistanceMetricType)(0), // 0: vearchpb.IndexParameters.DistanceMetricType
	(*RequestHead)(nil),                     // 1: vearchpb.RequestHead
	(*ResponseHead)(nil),                    // 2: vearchpb.ResponseHead
	(*GetRequest)(nil),                      // 3: vearchpb.GetRequest
	(*DeleteRequest)(nil),                   // 4: vearchpb.DeleteRequest
	(*BulkRequest)(nil),                     // 5: vearchpb.BulkRequest
	(*ForceMergeRequest)(nil),               // 6: vearchpb.ForceMergeRequest
	(*FlushRequest)(nil),                    // 7: vearchpb.FlushRequest
	(*IndexRequest)(nil),                    // 8: vearchpb.IndexRequest
	(*GetResponse)(nil),                     // 9: vearchpb.GetResponse
	(*DeleteResponse)(nil),                  // 10: vearchpb.DeleteResponse
	(*BulkResponse)(nil),                    // 11: vearchpb.BulkResponse
	(*ForceMergeResponse)(nil),              // 12: vearchpb.ForceMergeResponse
	(*DelByQueryeResponse)(nil),             // 13: vearchpb.DelByQueryeResponse
	(*FlushResponse)(nil),                   // 14: vearchpb.FlushResponse
	(*IndexResponse)(nil),                   // 15: vearchpb.IndexResponse
	(*TermFilter)(nil),                      // 16: vearchpb.TermFilter
	(*RangeFilter)(nil),                     // 17: vearchpb.RangeFilter
	(*SortField)(nil),                       // 18: vearchpb.SortField
	(*VectorQuery)(nil),                     // 19: vearchpb.VectorQuery
	(*IndexParameters)(nil),                 // 20: vearchpb.IndexParameters
	(*QueryRequest)(nil),                    // 21: vearchpb.QueryRequest
	(*SearchRequest)(nil),                   // 22: vearchpb.SearchRequest
	(*ResultItem)(nil),                      // 23: vearchpb.ResultItem
	(*SearchResult)(nil),                    // 24: vearchpb.SearchResult
	(*SearchResponse)(nil),                  // 25: vearchpb.SearchResponse
	(*SearchStatus)(nil),                    // 26: vearchpb.SearchStatus
	nil,                                     // 27: vearchpb.RequestHead.ParamsEntry
	nil,                                     // 28: vearchpb.ResponseHead.ParamsEntry
	nil,                                     // 29: vearchpb.QueryRequest.SortFieldMapEntry
	nil,                                     // 30: vearchpb.SearchRequest.SortFieldMapEntry
	(*Error)(nil),                           // 31: vearchpb.Error
	(*Document)(nil),                        // 32: vearchpb.Document
	(*Item)(nil),                            // 33: vearchpb.Item
	(*Field)(nil),                           // 34: vearchpb.Field
	(*Table)(nil),                           // 35: vearchpb.Table
}
var file_router_grpc_proto_depIdxs = []int32{
	27, // 0: vearchpb.RequestHead.params:type_name -> vearchpb.RequestHead.ParamsEntry
	31, // 1: vearchpb.ResponseHead.err:type_name -> vearchpb.Error
	28, // 2: vearchpb.ResponseHead.params:type_name -> vearchpb.ResponseHead.ParamsEntry
	1,  // 3: vearchpb.GetRequest.head:type_name -> vearchpb.RequestHead
	1,  // 4: vearchpb.DeleteRequest.head:type_name -> vearchpb.RequestHead
	1,  // 5: vearchpb.BulkRequest.head:type_name -> vearchpb.RequestHead
	32, // 6: vearchpb.BulkRequest.docs:type_name -> vearchpb.Document
	1,  // 7: vearchpb.ForceMergeRequest.head:type_name -> vearchpb.RequestHead
	1,  // 8: vearchpb.FlushRequest.head:type_name -> vearchpb.RequestHead
	1,  // 9: vearchpb.IndexRequest.head:type_name -> vearchpb.RequestHead
	2,  // 10: vearchpb.GetResponse.head:type_name -> vearchpb.ResponseHead
	33, // 11: vearchpb.GetResponse.items:type_name -> vearchpb.Item
	2,  // 12: vearchpb.DeleteResponse.head:type_name -> vearchpb.ResponseHead
	33, // 13: vearchpb.DeleteResponse.items:type_name -> vearchpb.Item
	2,  // 14: vearchpb.BulkResponse.head:type_name -> vearchpb.ResponseHead
	33, // 15: vearchpb.BulkResponse.items:type_name -> vearchpb.Item
	2,  // 16: vearchpb.ForceMergeResponse.head:type_name -> vearchpb.ResponseHead
	26, // 17: vearchpb.ForceMergeResponse.shards:type_name -> vearchpb.SearchStatus
	2,  // 18: vearchpb.DelByQueryeResponse.head:type_name -> vearchpb.ResponseHead
	2,  // 19: vearchpb.FlushResponse.head:type_name -> vearchpb.ResponseHead
	26, // 20: vearchpb.FlushResponse.shards:type_name -> vearchpb.SearchStatus
	2,  // 21: vearchpb.IndexResponse.head:type_name -> vearchpb.ResponseHead
	26, // 22: vearchpb.IndexResponse.shards:type_name -> vearchpb.SearchStatus
	0,  // 23: vearchpb.IndexParameters.metric_type:type_name -> vearchpb.IndexParameters.DistanceMetricType
	1,  // 24: vearchpb.QueryRequest.head:type_name -> vearchpb.RequestHead
	17, // 25: vearchpb.QueryRequest.range_filters:type_name -> vearchpb.RangeFilter
	16, // 26: vearchpb.QueryRequest.term_filters:type_name -> vearchpb.TermFilter
	29, // 27: vearchpb.QueryRequest.sort_field_map:type_name -> vearchpb.QueryRequest.SortFieldMapEntry
	18, // 28: vearchpb.QueryRequest.sort_fields:type_name -> vearchpb.SortField
	1,  // 29: vearchpb.SearchRequest.head:type_name -> vearchpb.RequestHead
	19, // 30: vearchpb.SearchRequest.vec_fields:type_name -> vearchpb.VectorQuery
	17, // 31: vearchpb.SearchRequest.range_filters:type_name -> vearchpb.RangeFilter
	16, // 32: vearchpb.SearchRequest.term_filters:type_name -> vearchpb.TermFilter
	30, // 33: vearchpb.SearchRequest.sort_field_map:type_name -> vearchpb.SearchRequest.SortFieldMapEntry
	18, // 34: vearchpb.SearchRequest.sort_fields:type_name -> vearchpb.SortField
	34, // 35: vearchpb.ResultItem.fields:type_name -> vearchpb.Field
	26, // 36: vearchpb.SearchResult.status:type_name -> vearchpb.SearchStatus
	23, // 37: vearchpb.SearchResult.result_items:type_name -> vearchpb.ResultItem
	2,  // 38: vearchpb.SearchResponse.head:type_name -> vearchpb.ResponseHead
	24, // 39: vearchpb.SearchResponse.results:type_name -> vearchpb.SearchResult
	3,  // 40: vearchpb.RouterGRPCService.Get:input_type -> vearchpb.GetRequest
	4,  // 41: vearchpb.RouterGRPCService.Delete:input_type -> vearchpb.DeleteRequest
	22, // 42: vearchpb.RouterGRPCService.Search:input_type -> vearchpb.SearchRequest
	5,  // 43: vearchpb.RouterGRPCService.Bulk:input_type -> vearchpb.BulkRequest
	1,  // 44: vearchpb.RouterGRPCService.Space:input_type -> vearchpb.RequestHead
	22, // 45: vearchpb.RouterGRPCService.SearchByID:input_type -> vearchpb.SearchRequest
	9,  // 46: vearchpb.RouterGRPCService.Get:output_type -> vearchpb.GetResponse
	10, // 47: vearchpb.RouterGRPCService.Delete:output_type -> vearchpb.DeleteResponse
	25, // 48: vearchpb.RouterGRPCService.Search:output_type -> vearchpb.SearchResponse
	11, // 49: vearchpb.RouterGRPCService.Bulk:output_type -> vearchpb.BulkResponse
	35, // 50: vearchpb.RouterGRPCService.Space:output_type -> vearchpb.Table
	25, // 51: vearchpb.RouterGRPCService.SearchByID:output_type -> vearchpb.SearchResponse
	46, // [46:52] is the sub-list for method output_type
	40, // [40:46] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_router_grpc_proto_init() }
func file_router_grpc_proto_init() {
	if File_router_grpc_proto != nil {
		return
	}
	file_data_model_proto_init()
	file_errors_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_router_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelByQueryeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_grpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_grpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_router_grpc_proto_goTypes,
		DependencyIndexes: file_router_grpc_proto_depIdxs,
		EnumInfos:         file_router_grpc_proto_enumTypes,
		MessageInfos:      file_router_grpc_proto_msgTypes,
	}.Build()
	File_router_grpc_proto = out.File
	file_router_grpc_proto_rawDesc = nil
	file_router_grpc_proto_goTypes = nil
	file_router_grpc_proto_depIdxs = nil
}
